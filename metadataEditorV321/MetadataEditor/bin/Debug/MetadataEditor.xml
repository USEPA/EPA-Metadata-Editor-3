<?xml version="1.0"?>
<doc>
<assembly>
<name>
MetadataEditor
</name>
</assembly>
<members>
<member name="P:MetadataEditor.EMEConfig.MdbFilepathname">
	<remarks/>
</member><member name="T:MetadataEditor.EMEConfig">
	<remarks/>
</member><member name="P:MetadataEditor.NewDataSet.Items">
	<remarks/>
</member><member name="T:MetadataEditor.NewDataSet">
	<remarks/>
</member><member name="F:MetadataEditor.XmlFragment.name">
	<summary>
 Name of the FGDC element this XMLFragment represents.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.XmlFragment.node">
	<summary>
 The DOM node (from the shared DOM) that corresponds to the FGDC element that this XMLFragment represents.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.XmlFragment.dom">
	<summary>
 Shared DOM representing the entire eainfo FGDC element.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.XmlFragment.controlledChildren">
	<summary>
 Controlled children dictionary. Keyed by FGDC element names of children. 
 Since children with a given name may be repeated, values are list of XMLFrament objects.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.fromXml(System.String@,System.Boolean)">
	<summary>
 Construct an XMLFragment from an xml string.
 </summary>
	<param name="xml">A string containing well-formed XML.</param>
	<param name="edomFix">Boolean value indicating if edom fix should be applied (see edomFixApply).</param>
	<returns>The newly created XMLFragment instance representing the given XML string.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.fromXmlNode(System.Xml.XmlNode)">
	<summary>
 Construct an XMLFragment from a DOM node (and its children).
 </summary>
	<param name="xn">A DOM node.</param>
	<returns>The newly created XMLFragment instance representing the given DOM node (and its children).</returns>
	<remarks></remarks>
</member><member name="P:MetadataEditor.XmlFragment.displayName">
	<summary>
 The display name of an XMLFragment is the text content of its DOM node.
 </summary>
	<value></value>
	<returns>A string with the contents of the XMLFragment.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.extract">
	<summary>
 Extract the shared DOM into XMLFragments. We only extract names we might manipulate, not everything.
 </summary>
	<remarks>This is where this implementation get eainfo specific.</remarks>
</member><member name="M:MetadataEditor.XmlFragment.extract(System.String[])">
	<summary>
 Extract each of the given names. 
 </summary>
	<param name="nameArray">Array of string containing the FGDC element names that need to be extracted.</param>
	<remarks>extract(String()) is just the middleman between extract() and extract(String)</remarks>
</member><member name="M:MetadataEditor.XmlFragment.extract(System.String)">
	<summary>
 Extract instances of the given FGDC element. They are moved from being DOM children to controlled children.
 </summary>
	<param name="name">String containing the FGDC element name that need to be extracted.</param>
	<remarks></remarks>
</member><member name="P:MetadataEditor.XmlFragment.value(System.String)">
	<summary>
 Get the value of the XMLFragment at the given XSL pattern.
 </summary>
	<param name="name">String containing the XSL pattern for the FGDC element of interest.</param>
	<value>Not used.</value>
	<returns></returns>
	<remarks>We should have combined setValue() sub with the set() part of this property.</remarks>
</member><member name="P:MetadataEditor.XmlFragment.valueList(System.String)">
	<summary>
 Get the list of XMLFragments identified by an XSL pattern.
 </summary>
	<param name="name">The XSL pattern identifying the values of interest.</param>
	<value>Not used.</value>
	<returns>List of XMLFragment.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.setValue(System.String,System.String)">
	<summary>
 Set the value of the XMLFragment identified by an XSL pattern.
 </summary>
	<param name="name">The XSL pattern identifying the values of interest.</param>
	<param name="val">String containing the value to set.</param>
	<remarks>We should have combined setValue() sub with the set() part of this property.</remarks>
</member><member name="M:MetadataEditor.XmlFragment.edomFixApply(System.Xml.XmlDocument)">
	<summary>
 Fix edom (if necessary) to comply with CSDGM.
 </summary>
	<param name="dom"></param>
	<remarks>While a no of sources (NOAA XSD and FGDC DTD for CSDGM as well as FGDC Editor in ArcGIS) 
 appear to allow for multiple edom elements under an attrdomv element, 
 these are divergent from CSDGM itself.</remarks>
</member><member name="M:MetadataEditor.XmlFragment.collectFromTwoLevels(System.String,System.String,System.String,System.Boolean)">
	<summary>
 Collect a list of XMLFragment objects representing repeated elements at two levels deep, optionally keeping duplicates.
 </summary>
	<param name="level1">Name of first level to go down from this XMLFragment.</param>
	<param name="level2">Name of second level to go down from the first level.</param>
	<param name="name">The name from which to collect values.</param>
	<param name="keepDuplicates">Boolean indicating if the duplicate values need to be kept.</param>
	<returns>List of XMLFragment.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.collectFromThreeLevels(System.String,System.String,System.String,System.String,System.Boolean)">
	<summary>
 Collect a list of XMLFragment objects representing repeated elements at two levels deep, optionally keeping duplicates.
 </summary>
	<param name="level1">Name of first level to go down from this XMLFragment.</param>
	<param name="level2">Name of second level to go down from the first level.</param>
	<param name="level3">Name of third level to go down from the second level.</param>
	<param name="name">The name from which to collect values.</param>
	<param name="keepDuplicates">Boolean indicating if the duplicate values need to be kept.</param>
	<returns>List of XMLFragment.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.collectInner(System.String,MetadataEditor.XmlFragment,System.Collections.Generic.List{MetadataEditor.XmlFragment},System.Boolean)">
	<summary>
 Collect the XMLFragment at the given name.
 </summary>
	<param name="name">The name of interest.</param>
	<param name="xfa">XMLFragment object to collect from.</param>
	<param name="lst">List of previously collected XMLFragment objects.</param>
	<param name="keepDuplicates">Boolean indicating if the duplicate values need to be kept.</param>
	<remarks>This should've been designed to operate on the target object.</remarks>
</member><member name="M:MetadataEditor.XmlFragment.collectFromEntities(System.String)">
	<summary>
 Front-end function to collect a repeated value from every entity.
 </summary>
	<param name="name">Name of repeated element to collect.</param>
	<returns>Array of XMLFragment.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.collectFromAttributes(System.String)">
	<summary>
 Front-end function to collect a repeated value from every attribute.
 </summary>
	<param name="name">Name of repeated element to collect.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.collectFromAttributeDomains(System.String)">
	<summary>
 Front-end function to collect a repeated value from every attrdomv element.
 </summary>
	<param name="name">Name of repeated element to collect.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.count(System.String)">
	<summary>
 Get the no of names at the given XSL pattern.
 </summary>
	<param name="name">An XSL pattern identifying the name of interest.</param>
	<returns>An integer value.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.delete(System.String,System.Int32)">
	<summary>
 Delete the name identified by the given XSL pattern and index.
 </summary>
	<param name="name">An XSL pattern identifying the name of of interest.</param>
	<param name="deleteIndex">The index of the XMLFragment to be deleted.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.add(System.String,System.Int32,MetadataEditor.XmlFragment)">
	<summary>
 Add the given XMLFragment at the given XSL pattern and index.
 </summary>
	<param name="name">An XSL pattern identifying the name of of interest.</param>
	<param name="addIndex">The index at which to add the XMLFragment.</param>
	<param name="xf">The XMLFragment to be added.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlFragment.construct(System.Boolean)">
	<summary>
 Reconstruct the XML representation of an XMLFragment from its name, controlled children and DOM children.
 </summary>
	<param name="topLevel">Boolean indicating if this XMLFragment is a top-level element.</param>
	<returns>A string containing the XML representation.</returns>
	<remarks></remarks>
</member><member name="T:MetadataEditor.XmlFragment">
	<summary>
 An XmlFragment holds a fragment of a larger XML document.
 Structurally, XmlFragment is a cross between a DOM node and a specialized object. 
 All XMLFragment instances share a DOM and each one points to itw own DOM node as 
 well as a set of its children that we care about (conrolled children). Controlled
 children are extracted out of the DOM during XMLFragment creation and all other 
 children (if any) are left behind in the DOM. When serialized, DOM is reconstructed
 from controlled children and DOM children at every level.
 </summary>
	<remarks>Current implementation allows for only one DOM shared by all class members. 
 This implementation is geared towards handling eainfo FGDC element and its children.</remarks>
</member><member name="M:MetadataEditor.Validator.#ctor">
	<remarks/>
</member><member name="E:MetadataEditor.Validator.validate_mpCompleted">
	<remarks/>
</member><member name="E:MetadataEditor.Validator.validate_epaCompleted">
	<remarks/>
</member><member name="E:MetadataEditor.Validator.date_changedCompleted">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.validate_mp(System.String)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.Beginvalidate_mp(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.Endvalidate_mp(System.IAsyncResult)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.validate_mpAsync(System.String)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.validate_mpAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.validate_epa(System.String)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.Beginvalidate_epa(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.Endvalidate_epa(System.IAsyncResult)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.validate_epaAsync(System.String)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.validate_epaAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.date_changed">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.Begindate_changed(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.Enddate_changed(System.IAsyncResult)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.date_changedAsync">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.date_changedAsync(System.Object)">
	<remarks/>
</member><member name="M:MetadataEditor.Validator.CancelAsync(System.Object)">
	<remarks/>
</member><member name="T:MetadataEditor.Validator">
	<remarks>
This source code was auto-generated by wsdl, Version=2.0.50727.42.
</remarks>
</member><member name="T:MetadataEditor.validate_mpCompletedEventHandler">
	<remarks/>
</member><member name="P:MetadataEditor.validate_mpCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:MetadataEditor.validate_mpCompletedEventArgs">
	<remarks/>
</member><member name="T:MetadataEditor.validate_epaCompletedEventHandler">
	<remarks/>
</member><member name="P:MetadataEditor.validate_epaCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:MetadataEditor.validate_epaCompletedEventArgs">
	<remarks/>
</member><member name="T:MetadataEditor.date_changedCompletedEventHandler">
	<remarks/>
</member><member name="P:MetadataEditor.date_changedCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:MetadataEditor.date_changedCompletedEventArgs">
	<remarks/>
</member><member name="M:MetadataEditor.AboutBox.pbCDA_Click(System.Object,System.EventArgs)">
	<summary>
 Open Coeur d'Alene Tribe website in a browser window.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.AboutBox.pbEPA_Click(System.Object,System.EventArgs)">
	<summary>
 Open EPA website in a browser window.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.AboutBox.pbOEI_Click(System.Object,System.EventArgs)">
	<summary>
 Open EPA OEI website in a browser window.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="F:MetadataEditor.MdUtils.quit">
	<summary>
 Quit hint. Set to true when the application is expected to exit based on user interaction
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.MdUtils.loadNext">
	<summary>
 The File to load next. Full file path name.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.MdUtils.currentlyEditing">
	<summary>
 File currently being edited. Full file path name.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.MdUtils.loadDefaultMd">
	<summary>
 Load a default metadata record which is essentially empty.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.MdUtils.getFilenameFromCommandLine">
	<summary>
 Extract metadata filename from command-line arguments if given.
 First argument is assumed to be the filename (full path).
 </summary>
	<returns>The metadata filename if passed as command-line argument, Nothing otherwise</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.MdUtils.promptForMdFile">
	<summary>
 Open a file dialog to prompt for metadata file selection.
 Selected filename (full path) is stored in loadNext variable, if successful.
 </summary>
	<returns>True if a file selection is made, False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.MdUtils.loadMdFile(System.String)">
	<summary>
 Load the metadata file at the given path.
 </summary>
	<param name="mdFilename">Full file path name to the metadata file to be loaded</param>
	<remarks>Checks are performed on the file to give meaningful messages if file can not be loaded.</remarks>
</member><member name="M:MetadataEditor.MdUtils.editMd(System.String,System.Boolean)">
	<summary>
 Edit the metadata record whose content is given.
 </summary>
	<param name="mdXml">The XML metadata record</param>
	<param name="readOnlyFile">Hint to indicate that the metadata record was opened in read-only mode if true. False (read-write) by default.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.MdUtils.Edit(MetadataEditor.XmlMetadata)">
	<summary>
 Main entry point into metadata editor.
 </summary>
	<param name="metadata">Metadata record copy to be edited.</param>
	<returns>
 Boolean return value indicates if the metadata record was modified by the editor
 </returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.MdUtils.splash">
	<summary>
 Put up a splash screen.
 </summary>
	<remarks>Disabled but left here for other users of EME source code.</remarks>
</member><member name="M:MetadataEditor.MdUtils.getRepeatCount(System.String,System.String)">
	<summary>
 Compute the number of times leafTag repeats directly under parentTag
 </summary>
	<param name="parentTag">The parent tag</param>
	<param name="leafTag">Name of the leaf tag to look for under parent tag</param>
	<returns>Number of repeats</returns>
	<remarks>You'll get wrong counts if parent tag matches multiple paths in the xml.</remarks>
</member><member name="M:MetadataEditor.MdUtils.injectIndex(System.String,System.Int32)">
	<summary>
 Inserts a number in place of the wildchar ?
 </summary>
	<param name="xpath">Xpath with wildchar(s) in it</param>
	<param name="idx">The index number to insert.</param>
	<returns>Returns modified xpath with the given index inserted as applicable</returns>
	<remarks></remarks>
</member><member name="T:MetadataEditor.MdUtils">
	<summary>
 Loose collection of metadata file utilities
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.thatControls(System.String)">
	<summary>
 Find the PageController oject that controls the form control with the given name.
 </summary>
	<param name="ctrlName">Name of form control</param>
	<returns>PageController object that controls the form control</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.readFromDb">
	<summary>
 Create and initialize PageController objects based on information stored in the database.
 </summary>
	<remarks>EME table in the database drives this process.</remarks>
</member><member name="M:MetadataEditor.PageController.#ctor(System.Int64,System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.Boolean,System.String)">
	<summary>
 Create a new PageController object with given information.
 </summary>
	<param name="orderedId">Unique id for the PageController that also determines the order in which its associated FGDC element is read/written</param>
	<param name="tag">Name of the FGDC element tag</param>
	<param name="srcTable">Name of database table to read element info from</param>
	<param name="srcField">Name of field in the database table to read info from</param>
	<param name="tabNo">Tab number on the EME user interface where the element is displayed</param>
	<param name="spellcheck">Whether the element will be a target of spellchecking</param>
	<param name="cluster">The name of element cluster (parent tag) that this tag is part of, if applicable.</param>
	<param name="help">Name of the help screen associated with this element, if different from default naming scheme</param>
	<remarks>
 A PageController is associated with form control whose value determines the value of an FGDC element's XML tag. 
 This is critical to understanding the operation of EME.
 </remarks>
</member><member name="M:MetadataEditor.PageController.SimpleGetProperty(System.String)">
	<summary>
 A utility function to get the value of simple tags (non-repeated, no child tags) 
 </summary>
	<param name="name">XSL pattern for the element relative to the top-level "metadata" tag</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.GetTextControls(MetadataEditor.EditorForm@,System.Int32)">
	<summary>
 Return all text controls marked for spellchecking, optionally filtered by tab number
 </summary>
	<param name="frm"></param>
	<param name="tabNo"></param>
	<returns>Returns array of TextBox objects that will be spellchecked.</returns>
	<remarks>
 If <paramref name="tabNo">tabNo</paramref> is specified (in base-1 index),
 only controls from the specified tab are returned.
 </remarks>
</member><member name="M:MetadataEditor.PageController.ElementPopulator(MetadataEditor.EditorForm@)">
	<summary>
 Iterate through all PageControllers and populate the elements/form controls that they control.
 </summary>
	<param name="frm"></param>
	<remarks></remarks>
</member><member name="P:MetadataEditor.PageController.parentTag">
	<summary>
 Determine the parent tag of a given semi-simple xpath to a tag.
 </summary>
	<value></value>
	<returns>The xpath to parent tag</returns>
	<remarks>Cheesy but works with the tag xpaths we deal with.</remarks>
</member><member name="M:MetadataEditor.PageController.populate(MetadataEditor.EditorForm@)">
	<summary>
 Populate this PageController object's form control
 </summary>
	<param name="frm">The editor form to find associated form control</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.comboBoxLoader(System.Windows.Forms.ComboBox,System.Boolean)">
	<summary>
 Load the ComboBox object associated with this PageController.
 </summary>
	<param name="ctrl">The ComboBox control</param>
	<param name="reload">Whether this is a reload or an initial load (optional)</param>
	<remarks>
 Stay away if you haven't fully grokked workings of table-driven ComboBox objects, EME's database driven operation, 
 complex FGDC elements  and their mapping to ComboBox objects.
 </remarks>
</member><member name="M:MetadataEditor.PageController.propagateClusterSelectionChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler for cluster controlling ComboBox objects that propagates the selection change to controlled cluster members.
 </summary>
	<param name="sender">Event sender. Cluster controlling ComboBox.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>A cluster is a set of FGDC sibling tags whose values are determined by the selected item in ComboBox.</remarks>
</member><member name="M:MetadataEditor.PageController.populateClusterEntry(System.Windows.Forms.ComboBox)">
	<summary>
 Populate cluster members based on applicable selections on the form.
 </summary>
	<param name="ctrl">Cluster controlling control</param>
	<remarks>Too convoluted. Lenght of the sub is testament to that. Prime for refactoring.</remarks>
</member><member name="M:MetadataEditor.PageController.listBoxLoader(System.Windows.Forms.ListBox,System.Boolean)">
	<summary>
 Load the ListBox object associated with this PageController.
 </summary>
	<param name="ctrl">The ListBox control</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.dataGridViewLoader(System.Windows.Forms.DataGridView,System.Boolean)">
	<summary>
 Load the DataGridView object associated with this PageController.
 
 </summary>
	<param name="ctrl">The DataGridView control</param>
	<param name="reload">True if this is a reload (not initial load)</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.listBoxLoaderFromMetadata(System.Windows.Forms.ListBox,System.Boolean)">
	<summary>
 Load the ListBox object associated with this PageController.
 </summary>
	<param name="ctrl">The ListBox control</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.DefaultSetter(MetadataEditor.EditorForm@,System.Int32)">
	<summary>
 Set defaults for each PageController controlled form controls on the given tab.
 </summary>
	<param name="frm">Editor form</param>
	<param name="tabNo">Tab number where default settings will be applied</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.setDefault(MetadataEditor.EditorForm@)">
	<summary>
 Set the form control controlled by this PageController to its default value.
 </summary>
	<param name="frm">Editor form</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.listBoxSetDefault(System.Windows.Forms.ListBox)">
	<summary>
 Set the ListBox control controlled by this PageController to its default value(s).
 </summary>
	<param name="ctrl">Editor form</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.comboBoxSetDefault(System.Windows.Forms.ComboBox)">
	<summary>
 Set the ComboBox control controlled by this PageController to its default value.
 </summary>
	<param name="ctrl">Editor form</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.textBoxSetDefault(System.Windows.Forms.TextBox)">
	<summary>
 Set the TextBox control controlled by this PageController to its default value.
 </summary>
	<param name="ctrl">Editor form</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.ValidateAction(MetadataEditor.EditorForm@)">
	<summary>
 Attempt webservice or local validation depending on current setting.
 </summary>
	<param name="frm">Editor form</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.showValidationResultsInBrowser(System.String)">
	<summary>
 Display validation results using the application associated with .xml files.
 This is typically Internet Explorer, though not necessarily.
 </summary>
	<param name="filename">String containing name of file to be displayed.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.showValidationResultsInEME(MetadataEditor.EditorForm,System.Xml.XmlDocument)">
	<summary>
 Display validation results on EME GUI. 
 </summary>
	<param name="frm">The EditorForm object used for EME GUI.</param>
	<param name="dom">The DOM containing the results of validation.</param>
	<remarks>Real action is performed by showValidationResultsInEMEDo().</remarks>
</member><member name="T:MetadataEditor.PageController.showValidationResultsInEMEDoCallback">
	<summary>
 Delegate for showValidationResultsInEMEDo().
 </summary>
	<param name="frm"></param>
	<param name="ctrlName"></param>
	<param name="msg"></param>
	<remarks>See showValidationResultsInEMEDo() for parameters. The delegate is required cross-thread calling of target.</remarks>
</member><member name="M:MetadataEditor.PageController.showValidationResultsInEMEDo(MetadataEditor.EditorForm,System.String,System.String)">
	<summary>
 The workhorse subroutine to display validation results on the EME GUI using little blinking led lights and hover tooltips.
 </summary>
	<param name="frm">The EditorForm object used for EME GUI.</param>
	<param name="ctrlName">Name of the control for which to display validation results.</param>
	<param name="msg">The message to be displayed in a hover tooltip.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.ValidationTimerFired(System.Object,System.EventArgs)">
	<summary>
 Event handler that cancels the executing validation thread when validation timeout occurs.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.ValidateAction(System.Object,System.ComponentModel.DoWorkEventArgs)">
	<summary>
 The worker process that will run in a separate thread and perform the actual validation work.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Used to return information about the type and outcome of validation work performed.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.ValidationWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
	<summary>
 Event handler that runs when validation worker thread completes its run.
 Informs user if something went wrong.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Used to examine information about the type and outcome of validation work performed.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.findParentName(System.String)">
	<summary>
 Determine the parent control's name.
 </summary>
	<param name="name">String containing a control's name whose parent is being sought,</param>
	<returns>String containing parent control's name.</returns>
	<remarks>This is an imperfect method for determining the parent of a control as it relies on removing 
 the part after the last name separator chracter. Caller should not assume that the returned name corresponds 
 to an existing control's name.</remarks>
</member><member name="P:MetadataEditor.PageController.isPartOfCluster">
	<summary>
 Determine if this PageController is part of a cluster.
 </summary>
	<returns>Returns true if this PageController is part of a cluster. Otherwise, returns false.</returns>
	<remarks></remarks>
</member><member name="P:MetadataEditor.PageController.formFieldName">
	<summary>
 Determine the name of the form control associated with this PageController.
 </summary>
	<returns>Returns the name of the form control associated with this PageController.</returns>
	<remarks></remarks>
</member><member name="P:MetadataEditor.PageController.sortProperty">
	<summary>
 Determine the sort property of this PageController.
 </summary>
	<returns>Returns the sort property of this PageController.</returns>
	<remarks>Sort property determines the order in which PageControllers, hence their, FGDC elements are processed.</remarks>
</member><member name="P:MetadataEditor.PageController.isClusterController">
	<summary>
 Determine if this PageController is a cluster controller.
 </summary>
	<returns>Returns true if this PageController is a cluster controller. Otherwise, returns false.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.addToCluster">
	<summary>
 Add this PageController to its cluster, if applicable.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.PageSaver(MetadataEditor.EditorForm@)">
	<summary>
 Save all PageControllers back to metadata record.
 </summary>
	<param name="frm">Editor form</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.eainfoSave(System.String)">
	<summary>
 Save the eainfo section of the metadata.
 </summary>
	<param name="eainfoXml">The XML representation of eainfo FGDC element as manipulated by EME.</param>
	<remarks>This is a divergence from the more straightforward mapping between form controls and 
 CSDGM sections that they control implemented using PageController objects. This is a necessary evil as 
 eainfo is too complicated to be mapped to a single form control.</remarks>
</member><member name="M:MetadataEditor.PageController.save(System.Windows.Forms.Control)">
	<summary>
 Save this PageController back to metadata record.
 </summary>
	<param name="ctrl">The control associated with this PageController.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.updateMetadata(System.String,System.Int32)">
	<summary>
 Update/delete the metadata tag associated with this PageController.
 </summary>
	<param name="tagValue">Value of the tag</param>
	<param name="index">Index of the tag if a repeated tag. 1-based.</param>
	<remarks>If the value is empty, the tag is deleted from the metadata record.</remarks>
</member><member name="M:MetadataEditor.PageController.textBoxSaver(System.Windows.Forms.TextBox@)">
	<summary>
 Save the contents of the TextBox object associated with this PageController to the metadata record.
 </summary>
	<param name="ctrl">The TextBox object associated with the PageController</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.listBoxSaver(System.Windows.Forms.ListBox@)">
	<summary>
 Save the contents of the ListBox object associated with this PageController to the metadata record.
 </summary>
	<param name="ctrl">The ListBox object associated with the PageController</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.comboBoxSaver(System.Windows.Forms.ComboBox@)">
	<summary>
 Save the contents of the ComboBox object associated with this PageController to the metadata record.
 </summary>
	<param name="ctrl">The ComboBox object associated with the PageController</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.dataGridViewSaver(System.Windows.Forms.DataGridView@)">
	<summary>
 Save the contents of the DataGridView object associated with this PageController to the metadata record.
 </summary>
	<param name="ctrl">The DataGridView object associated with the PageController</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.orderedPageControllers">
	<summary>
 Order all PageControllers.
 </summary>
	<returns>Returns an ArrayList of PageController objects sorted by their "orderedId"</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.isOnTab(System.Int32)">
	<summary>
 Determine if the control associated with this PageController is on a given tab.
 </summary>
	<param name="tabNum">Tab number</param>
	<returns>Returns true if the this PageController's form control is on the given tab. Otherwise, returns false.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.CompareTo(System.Object)">
	<summary>
 Compares the PageController object to another based on orderedId
 </summary>
	<param name="obj">PageController object to compare against</param>
	<returns>Returns a negative value if this PageController preceeds obj, 0 if equivalent (should not happen) or a positive value it succeeds obj.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.wipeEsriRequired(MetadataEditor.EditorForm)">
	<summary>
 Removes text content from all controls that start with "REQUIRED: ", something typically inserted by ESRI tools.
 </summary>
	<param name="frm">The EditorForm object whose controls will be inspected.</param>
	<returns>Boolean value indicating if any modifications were made.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.findAndReplaceAll(MetadataEditor.EditorForm,System.String,System.String)">
	<summary>
 Find and replace all occurrences of some string with another one for all controls.
 </summary>
	<param name="frm">The EditorForm object whose controls will be inspected.</param>
	<param name="oldValue">String containing text to be replaced.</param>
	<param name="newValue">String containing text to replace with.</param>
	<returns>The number of replacements made.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.dataGridViewFindAndReplace(System.Windows.Forms.DataGridView,System.String,System.String)">
	<summary>
 Specialized find and replace for text controlled via a DataGridView control.
 </summary>
	<param name="ctrl">DataGridView control to operate on.</param>
	<param name="oldValue">String containing text to be replaced.</param>
	<param name="newValue">String containing text to replace with.</param>
	<returns>The number of replacements made.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.findAndReplace(MetadataEditor.EditorForm,System.String,System.String)">
	<summary>
 Find and replace for all controls that have a "Text" property.
 </summary>
	<param name="frm">The EditorForm object whose controls will be inspected.</param>
	<param name="oldValue">String containing text to be replaced.</param>
	<param name="newValue">String containing text to replace with.</param>
	<returns>The number of replacements made.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.disableCluster(System.String)">
	<summary>
 Disable all controls participating in a cluster.
 </summary>
	<param name="name">String containing name of cluster whose participating controls will be disabled.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.getHelpPageFor(System.String,System.String)">
	<summary>
 Try to find and open the help page for the metadata element with the given name/xpath
 </summary>
	<param name="name">The xpath for the metadata element/tag</param>
	<param name="defaultHelp">Default help page to open if can't find the specific help page</param>
	<returns>URL of the help page as a string.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.updateContactButton(System.Windows.Forms.DataGridViewRow,System.Boolean)">
	<summary>
 Update the info displayed by the contact buttons embedded in procstep datagridview
 </summary>
	<param name="row">The row to update</param>
	<param name="deleteIfEmpty">If true and there is no contact info, the row is deleted.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.updateCitationButton(System.Windows.Forms.DataGridViewButtonCell,System.Boolean)">
	<summary>
 Update the info displayed by the citation buttons embedded in srcinfo datagridview
 </summary>
	<param name="btnCell">Data grid view cell holding the button</param>
	<param name="deleteIfEmpty">If true and there is no citation info, the row is deleted.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.PageController.dgvName">
	<summary>
 Handle special cases to compute a name suitable for use as a control name in a DataGridView.
 </summary>
	<returns>Control name</returns>
	<remarks></remarks>
</member><member name="T:MetadataEditor.PageController">
	<summary>
 Class that manages all manipulations to and operations on metadata - within the editor.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.ContactForm.btnCloseSave_Click(System.Object,System.EventArgs)">
	<summary>
 Close the form, saving its contents.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.ContactForm.btnCloseDiscard_Click(System.Object,System.EventArgs)">
	<summary>
 Close the form, discarding its contents.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.ContactForm.populate">
	<summary>
 Populate form fields using information from database.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.ContactForm.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
	<summary>
 Hook into a win32 function
 </summary>
	<param name="hwnd"></param>
	<param name="wMsg"></param>
	<param name="wParam"></param>
	<param name="lParam"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.ContactForm.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
	<summary>
 Override the Pressed Key Processing Routine of the MDI-Parent primarily to be able to pass down ctrl-x/c/v keypresses
 </summary>
	<param name="msg"></param>
	<param name="keyData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.ContactForm.cntinfo_____default_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to set a field to its default value
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:MetadataEditor.State">
	<summary>
 Enum representing the important phases of a form's lifetime.
 Loading: Form has started but not yet finished loading.
 Loaded: Form is loaded and ready for user interaction.
 Closing: Form has started closing.
 </summary>
	<remarks></remarks>
</member><member name="T:MetadataEditor.Modified">
	<summary>
 Enum representing a form's modification status.
 Clean: All tracked form controls retain their initial state.
 Dirty: At least one tracked form control has been modified from its initial state.
 </summary>
	<remarks></remarks>
</member><member name="T:MetadataEditor.HandleEvents">
	<summary>
 Enum representing a form's event handling state.
 Default: Events are handled as usual.
 Busy: Form is busy handling an event.
 Noise: Events are being ignored.
 </summary>
	<remarks></remarks>
</member><member name="P:MetadataEditor.EditorForm.FormState">
	<summary>
 Getter/setter for form state.
 </summary>
	<value>New state of form.</value>
	<returns>Current state of form.</returns>
	<remarks>See "State" enumeration.</remarks>
</member><member name="P:MetadataEditor.EditorForm.FormChanged">
	<summary>
 Getter/setter for form change status.
 </summary>
	<value>New change status of form.</value>
	<returns>Current change status of form.</returns>
	<remarks>See "Modified" enumeration.</remarks>
</member><member name="P:MetadataEditor.EditorForm.FormEventHandling">
	<summary>
 Getter/setter for form event handling status.
 </summary>
	<value>New event handling status of form.</value>
	<returns>Current event handling status of form.</returns>
	<remarks>See "HandleEvents" enumeration.</remarks>
</member><member name="M:MetadataEditor.EditorForm.#ctor">
	<summary>
 Create and initialize an EditorForm instance.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.EditorForm_Load(System.Object,System.EventArgs)">
	<summary>
 Load event handler form EditorForm.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.initSpellChecker">
	<summary>
 Initialize spelling checker component
 </summary>
	<remarks></remarks>
</member><member name="P:MetadataEditor.EditorForm.allControls">
	<summary>
 Read-only property returning all non-container controls on the form including those nested inside container controls.
 </summary>
	<value></value>
	<returns>Returs a HashTable of controls keyed by the names of the controls</returns>
	<remarks></remarks>
</member><member name="F:MetadataEditor.EditorForm.allControlsColl">
	<summary>
 Master collection holding all non-container controls on the form.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.allControlsSub(System.Object)">
	<summary>
 Recursively called subroutine adding all controlls in the given container to a master collection.
 </summary>
	<param name="Container">Container whose controls will be added to master collection of controls.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.setDirty(System.Object,System.EventArgs)">
	<summary>
 Mark form as modified.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.setDirty(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
	<summary>
 Event handler for cell events of a DataGridView control.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We simply set the form dirty.</remarks>
</member><member name="M:MetadataEditor.EditorForm.setDirty(System.Object,System.Windows.Forms.DataGridViewRowsRemovedEventArgs)">
	<summary>
 Event handler for row removal event of a DataGridView control.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We simply set the form dirty.</remarks>
</member><member name="M:MetadataEditor.EditorForm.setDirtyGeneric">
	<summary>
 Mark the form as dirty.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.registerControl(System.Windows.Forms.Control@)">
	<summary>
 Register a control by adding it to the master collection
 </summary>
	<param name="ctrl">Control to be registered</param>
	<remarks>Operations that apply to all controls in the form can be registered here.</remarks>
</member><member name="M:MetadataEditor.EditorForm.btnOpenDatabase_Click(System.Object,System.EventArgs)">
	<summary>
 Open Microsoft Access database holding metadata defaults and supporting settings.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.spellcheckTab(System.Object,System.EventArgs)">
	<summary>
 Spellcheck text controls on a given tab.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnSetDefault_Click(System.Object,System.EventArgs)">
	<summary>
 Set the default values for all controls in the current tab.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnValidate_Click(System.Object,System.EventArgs)">
	<summary>
 Validate metadata record as represented by current state of the form.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.HoverHelpInit">
	<summary>
 Initialize mouse hovering tips using text stored in the database.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.SpecMatchesControl(System.Windows.Forms.Control@,System.String,System.String)">
	<summary>
 Determine if the name specifications match the given control
 </summary>
	<param name="ctrl"></param>
	<param name="ctrlSpec"></param>
	<param name="ctrlParentSpec"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnMetaFRDate4yrs_Click(System.Object,System.EventArgs)">
	<summary>
 Update metadata future review date field to be four years from date provided for metadata review date.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.EditorForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
	<summary>
 Perform form closing tasks. If any obstacles, cancel form closing event.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnCloseSave_Click(System.Object,System.EventArgs)">
	<summary>
 Attempt to close form by saving any changes. Triggered by user action.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnCloseDiscard_Click(System.Object,System.EventArgs)">
	<summary>
 Attempt to close form by discarding any changes. Triggered by user action.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.default_Click(System.Object,System.EventArgs)">
	<summary>
 Set a field to its default value.
 </summary>
	<param name="sender">Event sender. A Button object whose name determines the field to manipulate</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>
 The Button object sending the event must have the same name as the object that will be manipulated, postfixed by idsep and the word "default".
 E.g.: Field with name "idinfo_citation_citeinfo_origin" can be set to default only by a button with name "idinfo_citation_citeinfo_origin_____default" where idsep equals "_____".
 </remarks>
</member><member name="M:MetadataEditor.EditorForm.group_default_Click(System.Object,System.EventArgs)">
	<summary>
 Set all controls in the same group as the default button itself to their default values.
 </summary>
	<param name="sender">Event sender. A Button object which will force all objects in its container to be set to their default values as applicable.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.CSI_default_Click(System.Object,System.EventArgs)">
	<summary>
 Set coordinate system info controls to default value.
 </summary>
	<param name="sender">Event sender.</param>
	<param name="e">Event arguments.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.getControlForTag(System.String)">
	<summary>
 Given the tag name, returns the Control object that controls the tag.
 </summary>
	<param name="tagName">Tag name. This is actually a uniquely identifying XSL pattern for an FGDC element where each non-alphanumeric character is replaced with an underscore character.</param>
	<returns></returns>
	<remarks>
 If a control for the given tag does not already exist, a textbox control is automatically created but not added to form. 
 This allows FGDC elements that are not directly represented on the user interface to be populated, manipulated and saved behind the scenes.
 </remarks>
</member><member name="M:MetadataEditor.EditorForm.btnViewMetadataXML_Click(System.Object,System.EventArgs)">
	<summary>
 Allow user to see metadata XML in a browser window. Triggered by user action.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.SettingsLoader">
	<summary>
 Load the initial values of user settings on Tab 3 using saved application settings.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.SettingsChecker(System.String)">
	<summary>
 Check to make sure the setting whose name is provided is valid .
 </summary>
	<param name="settingName">The name of the setting to check for. The VB.NET project must have a setting with this name.</param>
	<returns>Returns true if setting is valid, false otherwise.</returns>
	<remarks>Currently we only check for cluster update behavior setting.</remarks>
</member><member name="M:MetadataEditor.EditorForm.check_onlink_Click(System.Object,System.EventArgs)">
	<summary>
 Check the online linkage URL by attempting to open it using a browser window. 
 </summary>
	<param name="sender">Event sender. The Button object that raised the event.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>Can only check URL types that are registered with the user's browser.</remarks>
</member><member name="M:MetadataEditor.EditorForm.today_Click(System.Object,System.EventArgs)">
	<summary>
 Set the corresponding date field value to today's date.
 </summary>
	<param name="sender">Event sender. A Button object whose name determines the field to manipulate</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>
 The Button object sending the event must have the same name as the object that will be manipulated, postfixed by idsep and the word "today".
 E.g.: Field with name "dataqual_lineage_procstep_1__procdate" can be set to today's date only by a button with name "dataqual_lineage_procstep_1__procdate_____today" where idsep equals "_____".
 </remarks>
</member><member name="M:MetadataEditor.EditorForm.HelpSeeker(System.Object,System.EventArgs)">
	<summary>
 Open the help window with appropriate help screen.
 </summary>
	<param name="sender">Event sender. A Button object whose name determines the help screen to open</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>
 The Button object sending the event must have the same name as the object for which help will be displayed, postfixed by idsep and the word "help".
 </remarks>
</member><member name="M:MetadataEditor.EditorForm.HelpSeekerCustom(System.Object,System.EventArgs)">
	<summary>
 Handle custom help events associated with "help2" controls (as opposed to "help").
 </summary>
	<param name="sender">Event sender. Typically a LinkLabel object whose name determines the help screen to open</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.updateCSI(System.Object,System.EventArgs)">
	<summary>
 Update coordinate system information ComboBoxes when any one of them is changed so that the correct options are displayed in the rest of them.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>Arguably, the most convoluted piece in EME. Prime for refactoring.</remarks>
</member><member name="M:MetadataEditor.EditorForm.disableCSI">
	<summary>
 Disable controls associated with coordinate system info (spref).
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnRefreshFromDB_Click(System.Object,System.EventArgs)">
	<summary>
 Refresh those controls (on current tab) that get their value domain from the database.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.AdjustWidth_ComboBox_DropDown(System.Object,System.EventArgs)">
	<summary>
 Adjust dropdown menu width for ComboBox objects dynamically so that maximum amount of information is displayed without going off-screen.
 </summary>
	<param name="sender">Event sender. The ComboBox object whose dropdown width will be adjusted.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.AdjustWidth_ComboBox_DropDown2(System.Object,System.EventArgs)">
	<summary>
 Adjust dropdown menu width for DataGridViewComboBoxEditingControl objects dynamically so that maximum amount of information is displayed without going off-screen.
 </summary>
	<param name="sender">Event sender. The DataGridViewComboBoxEditingControl object whose dropdown width will be adjusted.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>Not functional.</remarks>
</member><member name="M:MetadataEditor.EditorForm.EditorForm_Activated(System.Object,System.EventArgs)">
	<summary>
 Form activated event handler. Performs one-time tasks that need to run after the form is loaded and activated.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.tbValidationTimeout_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Ensure that the validation timeout is set to a valid value.
 </summary>
	<param name="sender">Event sender. TextBox object holding the validation timeout value.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.tcEME_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler to keep track of which tab the user is on.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.spaciousFormOnDoubleClick(System.Object,System.EventArgs)">
	<summary>
 Event handler that opens a spacious entry form.
 </summary>
	<param name="sender">Event sender. The control that initiated the event.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnRemoveESRITags_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to remove ESRI added/specific stuff.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnFindReplace_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to open find and replace form.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnSave_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to perform (temporary) save operation.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.tcKeywords_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler to keep track of the last keyword tab selected by the user.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.idinfo_timeperd_timeinfo_TextChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler to write the correct metadata element depending on format of the timeinfo value entered.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>This went through a number of changes including the content allowed
 and the interactively updated help link (which was replaced by a static one). 
 Hence the abundance of commented lines.</remarks>
</member><member name="M:MetadataEditor.EditorForm.load_timeinfo">
	<summary>
 Initialize timeinfo control by peeking to see which element has content.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.tcEntityAttr_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler to keep track of the last entity/attribute tab the user has selected.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.turnOffWarnings">
	<summary>
 Reset all warning controls.
 </summary>
	<remarks>Call this when previously displayed validation results are no longer relevant.</remarks>
</member><member name="M:MetadataEditor.EditorForm.CSI_TextUpdate(System.Object,System.EventArgs)">
	<summary>
 Event handler to propagate coordinate system info changes upon TextUpdate event of related controls.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.EditorForm_ResizeBegin(System.Object,System.EventArgs)">
	<summary>
 Event handler to turn form transparent when user starts dragging it.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>.NET treats beginning of drag as a resize event.</remarks>
</member><member name="M:MetadataEditor.EditorForm.EditorForm_ResizeEnd(System.Object,System.EventArgs)">
	<summary>
 Event handler to turn form opaque when user stops dragging it.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>.NET treats ending of drag as a resize event.</remarks>
</member><member name="F:MetadataEditor.EditorForm.entIdx">
	<summary>
 Keeps track of the index of entity being operated on. Zero-based.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.EditorForm.attIdx">
	<summary>
 Keeps track of the index of attribute being operated on. Zero-based. Relative to current entity.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.EditorForm.eainfoXF">
	<summary>
 XMLFragment object representing the eainfo section of the metadata XML.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.eainfoInit">
	<summary>
 Initialize eainfo.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.eainfoHandlersAdd">
	<summary>
 Add handlers to detect selection of a new entity/attribute.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.eainfoHandlersRemove">
	<summary>
 Remove handlers that detect selection of a new entity/attribute.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.enttypl_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler for handling selection of a different entity.
 </summary>
	<param name="sender">Event sender. enttypl combo box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.entityUpdate(System.Boolean)">
	<summary>
 Update all entity selection dependent controls optionally resetting controls that are 
 directly entity related.
 </summary>
	<param name="resetEntities">Boolean indicating whether entity stuff will be reset.</param>
	<remarks>We want to reset entity controls in all cases except for navigation from one entity to another.
 Resetting causes controls to re-read their potential values (i.e. combo box options).</remarks>
</member><member name="M:MetadataEditor.EditorForm.attrlabl_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler for handling selection of a different attribute.
 </summary>
	<param name="sender">Event sender. attrlabl combo box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.attributeUpdate(System.Boolean)">
	<summary>
 Update all attribute selection dependent controls optionally resetting controls that are 
 directly attribute related.
 </summary>
	<param name="resetAttributes">Boolean indicating whether attribute stuff will be reset.</param>
	<remarks>We want to reset attribute controls in all cases except for navigation from one attribute to another.
 Resetting causes controls to re-read their potential values (i.e. combo box options).</remarks>
</member><member name="M:MetadataEditor.EditorForm.exists(System.String)">
	<summary>
 Check to see if an XSL pattern exists in eainfo.
 </summary>
	<param name="name">String containing the XSL pattern sought.</param>
	<returns>Boolean value indicating if the XSL patter exists in eainfo.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.domainUpdate">
	<summary>
 Update domain info based on currently selected entity/attribute.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnDeleteEntity_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when an entity is deleted on the GUI.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnDeleteAttribute_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when an attribute is deleted on the GUI.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnAddEntity_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when an entity is added on the GUI.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnAddAttribute_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when an attribute is added on the GUI.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.enttypl_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves enttypl combo box after modifying its text.
 </summary>
	<param name="sender">Event sender. enttypl combo box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the entity's name.</remarks>
</member><member name="M:MetadataEditor.EditorForm.enttypds_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves enttypds combo box after modifying its text.
 </summary>
	<param name="sender">Event sender. enttypds combo box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the entity's definition source.</remarks>
</member><member name="M:MetadataEditor.EditorForm.enttypd_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves enttypd text box after modifying its text.
 </summary>
	<param name="sender">Event sender. enttypd text box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the entity's definition.</remarks>
</member><member name="M:MetadataEditor.EditorForm.attrlabl_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves attrlabl combo box after modifying its text.
 </summary>
	<param name="sender">Event sender. attrlabl combo box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the attribute's name.</remarks>
</member><member name="M:MetadataEditor.EditorForm.attrdefs_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves attrdefs combo box after modifying its text.
 </summary>
	<param name="sender">Event sender. attrdefs combo box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the attribute's definition source.</remarks>
</member><member name="M:MetadataEditor.EditorForm.attrdef_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves attrdef text box after modifying its text.
 </summary>
	<param name="sender">Event sender. attrdef text box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the attribute's definition.</remarks>
</member><member name="M:MetadataEditor.EditorForm.rdommin_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves rdommin text box after modifying its text.
 </summary>
	<param name="sender">Event sender. rdommin text box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the range domain's min value.</remarks>
</member><member name="M:MetadataEditor.EditorForm.rdommax_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves rdommax text box after modifying its text.
 </summary>
	<param name="sender">Event sender. rdommax text box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the range domain's max value.</remarks>
</member><member name="M:MetadataEditor.EditorForm.codesetn_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves codesetn text box after modifying its text.
 </summary>
	<param name="sender">Event sender. codesetn text box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the codeset domain's name.</remarks>
</member><member name="M:MetadataEditor.EditorForm.codesets_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves codesets text box after modifying its text.
 </summary>
	<param name="sender">Event sender. codesets text box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the codeset domain's source.</remarks>
</member><member name="M:MetadataEditor.EditorForm.udom_Leave(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when focus leaves udom text box after modifying its text.
 </summary>
	<param name="sender">Event sender. udom text box.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the unrepresentable domain.</remarks>
</member><member name="M:MetadataEditor.EditorForm.dgv_edom_CellLeave(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
	<summary>
 Event handler that executes when focus leaves a DataGridViewCell after modifying its text.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to update the enumerated domain.</remarks>
</member><member name="M:MetadataEditor.EditorForm.btnAddDgvRow(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when user click the button to add a new procstep.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnDelDgvRow(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when user click the button to delete the selected procstep(s).
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.dgv_SelectionChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler that executes when procstep selection changes.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>We use this event to enable/disable procstep deletion button. We enable it only if there are any selected rows.</remarks>
</member><member name="M:MetadataEditor.EditorForm.initUserKeywordsTab">
	<summary>
 Initialize the user keywords tab by retrieving its name from the database.
 Defaults to "User".
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.EditorForm.moreLinkages">
	<summary>
 Boolean that controls if all linkage input boxes should be shown or the first few.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnMoreLinkages_Click(System.Object,System.EventArgs)">
	<summary>
 Show/Hide more linkages upon user click
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.cntp_CheckedChanged(System.Object,System.EventArgs)">
	<summary>
 Keep the contact person/org in sync independent of whether person or org is the primary contact.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.mirror(System.String,System.String)">
	<summary>
 Helper sub to keep the contact person/org in sync independent of whether person or org is the primary contact.
 </summary>
	<param name="this"></param>
	<param name="that"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.OpenToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Open a file handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.ViewMetadataXMLToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 View metadata XML handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.ValidateToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Validate metadata handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.saveMdToFile(System.String)">
	<summary>
 Save the metadata currently being edited to file.
 </summary>
	<param name="filename"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.SaveToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Save metadata handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.SaveAsToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Save metadata as handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.NewToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 New metadata record handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.ContentsToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Help contents handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.ViewInUserInterfaceToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 View validation results in user interface setting handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.ViewInBrowserWindowToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 View validation results in browser setting handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.OpenDatabaseToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Open database handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.SpellCheckToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Spell check handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.ExitToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Exit handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.SetDefaultToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Set fields to default values handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.RefreshFromDatabaseToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Refresh configuration from database handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.RemoveESRITagsToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Remove ESRI tags handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.FindAndReplaceToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Find and replace handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.ValidationToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Validation settings handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.AboutToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Open About form handler
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
	<summary>
 Hook into a win32 function
 </summary>
	<param name="hwnd"></param>
	<param name="wMsg"></param>
	<param name="wParam"></param>
	<param name="lParam"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
	<summary>
 Override the Pressed Key Processing Routine of the MDI-Parent primarily to be able to pass down ctrl-x/c/v keypresses
 </summary>
	<param name="msg"></param>
	<param name="keyData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.InstallEPAStylesheetsToolStripMenuItem_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to install/uninstall EPA stylesheets
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.setupEpaStylesheetsMenuItem">
	<summary>
 Update menu item name to reflect correct action based on install status of EPA stylesheets
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.dataqual_lineage_procstep_CellContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
	<summary>
 Show contact form if user clicked on such button.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnObjectInfo_Click(System.Object,System.EventArgs)">
	<summary>
 spdoinfo elements are displayed in two modes (minimized/maximized). Set things up
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.setupSpdoinfo(System.Boolean)">
	<summary>
 Maximize or minimize spdoinfo panel.
 </summary>
	<param name="maximize"></param>
	<remarks>Numbers carefully hand-tuned to avoid incorrect display issue that have been reported by only one beta tester.</remarks>
</member><member name="F:MetadataEditor.EditorForm.spdoinfo_direct_PreviousSelectedIndex">
	<summary>
 Keeps track of the previously selected index
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.spdoinfo_direct_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler to gracefully handle the impacts of changing the spdoinfo/direct element.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnEditLineage_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to show lineage panel.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnCloseLineage_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to hide lineage panel.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.dataqual_lineage_srcinfo_CellContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
	<summary>
 Show citation form if user clicked on such button.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.copyButtonCellToNewRow(System.Windows.Forms.DataGridView,System.Int32,System.Int32)">
	<summary>
 Copies useful info from a button cell inside one row to a new row.
 </summary>
	<param name="dgv">Grid to operate within</param>
	<param name="rowIndex">Row index of source row</param>
	<param name="columnIndex">Column index of source cell</param>
	<returns>True if copy was performed</returns>
	<remarks>Helps tame  a grid object to behave consistently in creating new rows when clicked on a cell button vs a regular cell.</remarks>
</member><member name="M:MetadataEditor.EditorForm.warning_VisibleChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler to manage visible alerts in areas that have different display modes.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.dgv_ColumnHeaderMouseClick(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
	<summary>
 Display help for appropriate element if user clicks on a grid header.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnCopy_absres2ordres_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to copy absres value to ordres
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnCopy_latres2longres_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to copy latres value to longres
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.btnCopy_textBox2textBox(System.Windows.Forms.TextBox,System.Windows.Forms.TextBox)">
	<summary>
 Copies value of one text box to another if one has value and the other is empty
 </summary>
	<param name="c1"></param>
	<param name="c2"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.updateLineageCounts">
	<summary>
 Update counts of processing step and source information records
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.EditorForm.dgv_CellValidating(System.Object,System.Windows.Forms.DataGridViewCellValidatingEventArgs)">
	<summary>
 Event handler that executes when focus leaves a DataGridViewComboBoxCell after modifying its text.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Used to get the newly entered value.</param>
	<remarks>We use this event to insert the new value if not already available as an option for the combo box.</remarks>
</member><member name="M:MetadataEditor.EditorForm.dgv_CellShowing(System.Object,System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)">
	<summary>
 Sets the behavior of the combo box object within a grid.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>Need to do this when cell is showing as the combo box object is created on the fly.</remarks>
</member><member name="M:MetadataEditor.EditorForm.EditorForm_MouseEnter(System.Object,System.EventArgs)">
	<summary>
 Helper function keeping track of what control has the mouse.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>Was needed to diagnose Donnie Williams issue.</remarks>
</member><member name="M:MetadataEditor.EditorForm.setupForDonnie">
	<summary>
 Set up event handlers to help diagnose Donnie Williams issue.
 </summary>
	<remarks></remarks>
</member><member name="T:MetadataEditor.EditorForm">
	<summary>
 EditorForm implements EME's user interface.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.LocalValidator.errorxml(System.String,System.String,System.String,System.String)">
	<summary>
 Generate an XML snippet (for use in metadata validation error reporting) with the provided information.
 </summary>
	<param name="type">Type of validation issue</param>
	<param name="message">Message describing the issue</param>
	<param name="linenum">Metadata XML file line number if available</param>
	<param name="errid">An identifier for the element with the reported issue if available. Constructed using the XPath for the element</param>
	<returns>Returns a string containing the XML snippet.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.LocalValidator.escapeXml(System.String)">
	<summary>
 Replace special XML characters with their escape codes
 </summary>
	<param name="txt">Text to be XML-escaped</param>
	<returns>A String with content XML-escaped.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.LocalValidator.validate_mp(System.String,System.String)">
	<summary>
 Perform MP validation on the provided XML metadata record.
 </summary>
	<param name="root_dir">Root directory for EME.</param>
	<param name="inxml">Metadata XML to be validated.</param>
	<returns>Returns an XML snippet containing issues found with the metadata record</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.LocalValidator.validate_epa(System.String,System.String)">
	<summary>
 Perform EPA validation on the provided XML metadata record.
 </summary>
	<param name="root_dir">Root directory for EME</param>
	<param name="inxml">Metadata XML to be validated</param>
	<returns>Returns an XML snippet containing issues found with the metadata record</returns>
	<remarks>Utilizes a Schematron generated XSL transform to identify issues with respect to metadata rules that EPA enforces. 
 Needs to be made optional to better accomodate non-EPA users.</remarks>
</member><member name="M:MetadataEditor.LocalValidator.transform_epa(System.String,System.String,System.String,System.String)">
	<summary>
 Apply an XSL transform to an XML file.
 </summary>
	<param name="xslfile">Full filepathname of the XSLT file</param>
	<param name="fin">Full filepathname of the input file</param>
	<param name="fout">Full filepathname of the output file</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.LocalValidator.type_to_dir(System.String)">
	<summary>
 Given the type of validation, return the subdirectory name to use.
 </summary>
	<param name="type">Validation type</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.LocalValidator.file_in(System.String,System.String,System.String)">
	<summary>
 Write file with given name and contents under appropriate validation subdirectory to feed into the validation system.
 </summary>
	<param name="type">Validation type</param>
	<param name="fname">Filename</param>
	<param name="contents">File contents</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.LocalValidator.file_out(System.String,System.String)">
	<summary>
 Read file with given name under appropriate validation subdirectory to get feed back from the validation system.
 </summary>
	<param name="type">Validation type</param>
	<param name="fname">Filename</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.LocalValidator.date_changed(System.String)">
	<summary>
 Return date that validation rules were last updated
 </summary>
	<param name="root_dir">Root directory for EME install</param>
	<returns></returns>
	<remarks>Relies on "date_changed.xml" file. Only useful on the server side.</remarks>
</member><member name="M:MetadataEditor.LocalValidator.delete_files(System.String,System.String)">
	<summary>
 Delete files in MP or EPA subdirectory matching the given name specification.
 </summary>
	<param name="type">Type ("mp" or "epa")</param>
	<param name="fname">Filename starts with this string</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.LocalValidator.parseErrors(System.String,System.String,System.String@)">
	<summary>
 Parse errors and warnings in MP output.
 </summary>
	<param name="errorFileName">Fully qualified filename for the file that contains MP output.</param>
	<param name="inputFile">Fully qualified filename for the metadata file.</param>
	<param name="ans">This parameter is not used. Should be removed and locally declared.</param>
	<returns>Returns an XML snippet containing errors/warnings found with the metadata record </returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.LocalValidator.runMP(System.String,System.String,System.String,System.String@)">
	<summary>
 Run the mp_win.exe application.
 </summary>
	<param name="workdir">Working directory where mp_win.exe resides and temporary files are created.</param>
	<param name="outputFile">Output filename where MP output will go.</param>
	<param name="errorFileName">Error filename where MP errors will go.</param>
	<param name="ans">Anny errors that occur will be reported in this parameter passed by reference.</param>
	<returns>True if successful. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.SplashScreen.#ctor">
	<summary>
 Create and initialize the splash screen form.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.SplashScreen.SplashScreen_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler for the click on the form. Closes the form.
 </summary>
	<param name="sender">Not used.</param>
	<param name="e">Not used.</param>
	<remarks></remarks>
</member><member name="T:MetadataEditor.SplashScreen">
	<summary>
 Class that provides a splash screen for the EME extension.
 Has been disabled by request but still here if anyone wants to use it.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.CitationForm.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
	<summary>
 Hook into a win32 function
 </summary>
	<param name="hwnd"></param>
	<param name="wMsg"></param>
	<param name="wParam"></param>
	<param name="lParam"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.CitationForm.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
	<summary>
 Override the Pressed Key Processing Routine of the MDI-Parent primarily to be able to pass down ctrl-x/c/v keypresses
 </summary>
	<param name="msg"></param>
	<param name="keyData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.CitationForm.check_onlink_Click(System.Object,System.EventArgs)">
	<summary>
 Check the online linkage URL by attempting to open it using a browser window. 
 </summary>
	<param name="sender">Event sender. The Button object that raised the event.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>Can only check URL types that are registered with the user's browser.</remarks>
</member><member name="M:MetadataEditor.CitationForm.HelpSeeker(System.Object,System.EventArgs)">
	<summary>
 Open the help window with appropriate help screen.
 </summary>
	<param name="sender">Event sender. A Button object whose name determines the help screen to open</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks>
 The Button object sending the event must have the same name as the object for which help will be displayed, postfixed by idsep and the word "help".
 </remarks>
</member><member name="M:MetadataEditor.CitationForm.populateDropdowns">
	<summary>
 Populate dropdown controls from database table
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.ProgressDialog.ShowMessage(System.String)">
	<summary>
 Display a progress dialog with provided message.
 </summary>
	<param name="msg">Message to display on the progress dialog.</param>
	<remarks>If a progress dialog is already being displayed, it is replaced with a new one</remarks>
</member><member name="M:MetadataEditor.ProgressDialog.CancelMessage">
	<summary>
 Close the currently displayed progress dialog if there is one.
 </summary>
	<remarks></remarks>
</member><member name="T:MetadataEditor.ProgressDialog">
	<summary>
 Class that provides a progress dialog to display during validation.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.SpaciousEntryForm.elt">
	<summary>
 The name of the input element for which the form is opened.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.SpaciousEntryForm.origText">
	<summary>
 Original text that will be made available for editing on the form.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.SpaciousEntryForm.saved">
	<summary>
 Flag to indicate if the element has been saved after last edit on the form.
 </summary>
	<remarks></remarks>
</member><member name="P:MetadataEditor.SpaciousEntryForm.element">
	<summary>
 The name of the control on main EME form that this form is associated with.
 </summary>
	<value>A control's name string.</value>
	<remarks></remarks>
</member><member name="P:MetadataEditor.SpaciousEntryForm.elementDisplayName">
	<summary>
 The name to display for the element being edited on this form.
 </summary>
	<value>User friendly name string.</value>
	<remarks></remarks>
</member><member name="P:MetadataEditor.SpaciousEntryForm.content">
	<summary>
 The content being edited on this form.
 </summary>
	<value>A string containing the text content.</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:MetadataEditor.SpaciousEntryForm.optionalityColor">
	<summary>
 The background color for the form depending on optionality of the element being edited.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:MetadataEditor.SpaciousEntryForm.changed">
	<summary>
 Indicates that the content has changed.
 </summary>
	<returns>True if the content is different from the original text when the form was opened.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.SpaciousEntryForm.btnCloseSave_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler for the "Close and save" button. Prompts user to confirm.
 </summary>
	<param name="sender">Not used.</param>
	<param name="e">Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.SpaciousEntryForm.btnCloseDiscard_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler for the "Close and Discard" button. Prompts user to confirm.
 </summary>
	<param name="sender">Not used.</param>
	<param name="e">Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.SpaciousEntryForm.llHelp_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
	<summary>
 Event handler for the help link. Opens help for the element being edited.
 </summary>
	<param name="sender">Not used.</param>
	<param name="e">Not used.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.SpaciousEntryForm.SpaciousEntryForm_Activated(System.Object,System.EventArgs)">
	<summary>
 Focus on the input area as soon as the form is loaded.
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.SpaciousEntryForm.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
	<summary>
 Hook into a win32 function
 </summary>
	<param name="hwnd"></param>
	<param name="wMsg"></param>
	<param name="wParam"></param>
	<param name="lParam"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.SpaciousEntryForm.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
	<summary>
 Override the Pressed Key Processing Routine of the MDI-Parent primarily to be able to pass down ctrl-x/c/v keypresses
 </summary>
	<param name="msg"></param>
	<param name="keyData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:MetadataEditor.SpaciousEntryForm">
	<summary>
 Class that provides a spacious entry form, i.e. a form that has more space for entering text
 for the particular data element it is associated with.
 </summary>
	<remarks>Only one form is allowed to be open currently. Maybe we should relax this constraint 
 to allow easier copy/paste, viewing/comparing content, etc.?</remarks>
</member><member name="M:MetadataEditor.DummyForm.DummyForm_Load(System.Object,System.EventArgs)">
	<summary>
 This form drives EditorForm
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.DummyForm.checkAndCopyTemplate">
	<summary>
 Initialize essential files by copying from template if ncessary.
 </summary>
	<returns>True if successful.</returns>
	<remarks></remarks>
</member><member name="T:MetadataEditor.DummyForm">
	<summary>
 EME loads up slowly due to lots of parsing processing at start up. This form is displayed meanwhile.
 It also acts as the parent window controlling the EditorForm.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.FindReplaceForm.btnReplaceAll_Click(System.Object,System.EventArgs)">
	<summary>
 Carry out find/replace functionality when the user clicks the button for it.
 </summary>
	<param name="sender">Not used</param>
	<param name="e">Not used</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.FindReplaceForm.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
	<summary>
 Hook into a win32 function
 </summary>
	<param name="hwnd"></param>
	<param name="wMsg"></param>
	<param name="wParam"></param>
	<param name="lParam"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.FindReplaceForm.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
	<summary>
 Override the Pressed Key Processing Routine of the MDI-Parent primarily to be able to pass down ctrl-x/c/v keypresses
 </summary>
	<param name="msg"></param>
	<param name="keyData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:MetadataEditor.FindReplaceForm">
	<summary>
 A simple class to provide user interface for find/replace functionality.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.XmlMetadata.dom">
	<summary>
 Internal structure to hold the metadata document
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.SetPropertyX(System.String,System.String)">
	<summary>
 Set the element with the given xpath to the given value.
 </summary>
	<param name="xpathStr">xpath expression of element to update. Does not have to pre-exist in the metadata document.</param>
	<param name="value">New content for element</param>
	<remarks>Assumes that the xpath points at most to a single target. Only the first occurence is updated.</remarks>
</member><member name="M:MetadataEditor.XmlMetadata.makeXpath(System.String,System.Xml.XmlNodeType)">
	<summary>
 Create the given element hierarchy as dictated by the given xpath. All elements leading up to the leaf tag will be created if not already there.
 </summary>
	<param name="xpathStr">xpath expression for the element hierarchy to create</param>
	<param name="nodeType">The type of leaf node to create. Default is a text node which is currently the only supported node.</param>
	<returns>True if succesful, False otherwise.</returns>
	<remarks>Logic does handle xpaths involving integer indexes.</remarks>
</member><member name="M:MetadataEditor.XmlMetadata.GetXml(System.String,System.Boolean,System.Boolean)">
	<summary>
 Get the XML snippet pointed to by the given xpath expression.
 </summary>
	<param name="xpathStr">xpath expression of the XML snippet targeted.</param>
	<param name="normalize">Normalize the xpath expression to start with root element (/metadata/) if not already.</param>
	<param name="outerXml">Return outer XML for the xpath target if True, return inner XML otherwise.</param>
	<returns>Returns the inner/outer XML snippet targeted by the xpath expression.</returns>
	<remarks>Some xpaths have special meaning: empty xpath return entire XML including any XML declaration; slash returns starting at root element without any headers.</remarks>
</member><member name="M:MetadataEditor.XmlMetadata.SetXml(System.String)">
	<summary>
 Set the XML document to the given xml content.
 </summary>
	<param name="xmlStr">String with XML content.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.copyFrom(MetadataEditor.XmlMetadata,System.String,System.String)">
	<summary>
 Copy an XML snippet from one document and graft into current.
 </summary>
	<param name="src">Source XmlMetadata object to copy from</param>
	<param name="xpathStrSource">Source xpath expression to copy from</param>
	<param name="xpathStrTarget">Target xpath expression denoting where the XML snippet will be copied to. If not specified, then same as source xpath.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.copyFromString(System.String,System.String)">
	<summary>
 Copy an XML snippet from one document and graft into current.
 </summary>
	<param name="srcXml">Source Xml snippet to copy from</param>
	<param name="xpathStrTarget">Target xpath expression denoting where the XML snippet will be copied to.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.SetXml(System.String,System.String)">
	<summary>
 Copy the given XML snippet and graft at the element pointed by given xpath expression
 </summary>
	<param name="xpathStr">xpath target to receive XML snippet</param>
	<param name="xmlStr">The XML snippet to be received.</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.DeleteProperty(System.String)">
	<summary>
 Delete the element(s) pointed by the given xpath expression
 </summary>
	<param name="xpathStr">xpath expression for element(s) to be deleted</param>
	<remarks>All elements targeted by the xpath expression are deleted.</remarks>
</member><member name="M:MetadataEditor.XmlMetadata.SimpleGetProperty(System.String)">
	<summary>
 Get element value
 </summary>
	<param name="xpathStr">xpath expression for element targeted</param>
	<returns>String value of the element at given xpath.</returns>
	<remarks>If element is compound, then value is compound values of all subelements - though it's unusual to use that way.</remarks>
</member><member name="M:MetadataEditor.XmlMetadata.GetProperty(System.String)">
	<summary>
 Get element values
 </summary>
	<param name="xpathStr">xpath expression for elements targeted</param>
	<returns>List of String values with one entry for each element matching the given xpath expression. Nothing is returned if no matches.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.CountX(System.String)">
	<summary>
 Determine the no of occurences of the given xpath expression.
 </summary>
	<param name="xpathStr">xpath expression to count the occurrences of</param>
	<returns>The number of time that the given xpath expression is encountered.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.getRootTag">
	<summary>
 Get the name of the root element of the XML document.
 </summary>
	<returns>Name of the root element as String</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.checkDeleteKTTags">
	<summary>
 Delete XSL pattern indexed tags if not used in the metadata record.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.checkCreateKTTags">
	<summary>
 Create XSL pattern indexed tags if not already in the metadata record.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.normalize(System.String)">
	<summary>
 Normalize the given xpath expression to start with the root element (/metadata/), if not already.
 </summary>
	<param name="xpathStr">xpath expression to normalize</param>
	<returns>Normalized xpath expression</returns>
	<remarks>Handles only simple xpath expressions</remarks>
</member><member name="M:MetadataEditor.XmlMetadata.deletePropertyAndEmptyParents(System.String)">
	<summary>
 Delete an element from the metadata including all of its empty parents.
 </summary>
	<param name="name">Xpath of the element to delete</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.XmlMetadata.tagIsEmpty(System.String)">
	<summary>
 Determine if the provided tag has any text content.
 </summary>
	<param name="name">Name of the tag to check</param>
	<returns>Return true if the given tag has no text content (other than whitespace). Otherwise, return false.</returns>
	<remarks></remarks>
</member><member name="T:MetadataEditor.XmlMetadata">
	<summary>
 XmlMetadata represents a metadata document that is serialized from/to XML and provides basic operations to manipulate metadata.
 </summary>
	<remarks>XmlMetadata class was designed to remove reliance on several ArcObjects metadata objects such as IXMLPropertySet2.
 It does not attempt to be 100% compatible in function or API coverage but implements enough to fulfill its design goal.</remarks>
</member><member name="F:MetadataEditor.GlobalVars.config">
	<summary>
 Configuration from XML file.
 </summary>
	<remarks>We use this to give the user a way to configure some options that are not configurable through the user interface.</remarks>
</member><member name="T:MetadataEditor.GlobalVars.appState">
	<summary>
 Enum that defines application states we are interested in keeping track of
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.GlobalVars.currentAppState">
	<summary>
 Variable that keeps track of the current application state
 </summary>
	<remarks></remarks>
</member><member name="P:MetadataEditor.GlobalVars.enabled">
	<summary>
 Get/Set if the application is enabled
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:MetadataEditor.GlobalVars.mdbPath">
	<summary>
 Path to supporting MSAccess database
 </summary>
	<remarks>This can be overridden by the user in config.xml</remarks>
</member><member name="P:MetadataEditor.GlobalVars.mdbPathDefault">
	<summary>
 Default path to supporting MSAccess database
 </summary>
	<remarks>Actual path can be retrieved via mdbPath property.</remarks>
</member><member name="P:MetadataEditor.GlobalVars.connStr">
	<summary>
 The OLEDB connection string used to connect to the MSAccess database.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.GlobalVars.idSep">
	<summary>
 The separator used internally by EME to seperate various postfixes from identifiers based on the XSL pattern for the element
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.GlobalVars.nameStr">
	<summary>
 Name string for this application used in a number of contexts. 
 Some other name references had to be hardwired, so changing the value here alone is not sufficient.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.GlobalVars.iXPS">
	<summary>
 Variable that holds the metadata record copy being edited.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.GlobalVars.savedSession">
	<summary>
 Indicator that the user has performed a save without closing EME.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.GlobalVars.recoveredSession">
	<summary>
 Indicator that a previously saved metadata record was recovered during current EME session.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.GlobalVars.init">
	<summary>
 (Re)Initialize global variables as applicable.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.GlobalVars._userThesaurus">
	<summary>
 The user thesaurus being used if applicable.
 </summary>
	<remarks></remarks>
</member><member name="P:MetadataEditor.GlobalVars.userThesaurus">
	<summary>
 The property providing controlled access to user thesaurus.
 </summary>
	<remarks></remarks>
</member><member name="F:MetadataEditor.GlobalVars.proc">
	<summary>
 Keeps track of the HTML Help process (hh.exe) to avoid having more than one help window open.
 </summary>
	<remarks></remarks>
</member><member name="T:MetadataEditor.GlobalVars.ValidationMode">
	<summary>
 Enumeration for metadata validation modes:
 <c>Webservice</c> uses EPA's validation webservice with fallback to local validation upon failure or timeout.
 <c>Local</c> uses local validation service hardwired into the editor.
 </summary>
	<remarks>
 At the time of release, webservice and local validation both yield the same results.
 It is conceivable that the webservice validation may be updated ahead of or without an update to EME.
 </remarks>
</member><member name="F:MetadataEditor.GlobalVars._ValidationMode">
	<summary>
 Holds the validation mode in effect.
 </summary>
	<remarks></remarks>
</member><member name="P:MetadataEditor.GlobalVars.CurrentValidationMode">
	<summary>
 Gets/sets the validation mode in effect.
 </summary>
	<remarks></remarks>
</member><member name="P:MetadataEditor.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:MetadataEditor.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:MetadataEditor.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:MetadataEditor.Utils.getAppFolder">
	<summary>
 Returns the folder path where EME is installed in.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.getTemplateFolder">
	<summary>
 Returns the folder path where the template files are stored in.
 </summary>
	<returns></returns>
	<remarks>Template files are copied to application data folder at start up if necessary.</remarks>
</member><member name="M:MetadataEditor.Utils.getAppDataFolder">
	<summary>
 Returns the folder path where application data is stored.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.getEpaFolder">
	<summary>
 Returns the folder path where files for EPA validation are stored.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.getMpFolder">
	<summary>
 Returns the folder path where files for EPA validation are stored.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.getWorkingFolder">
	<summary>
 Returns the folder path where temporary files are stored in.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.getEpaStylesheetsSourceFolder">
	<summary>
 Returns the folder path where EPA stylesheet files are stored in at install time.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.getArcgisMetadataFolder">
	<summary>
 Returns the folder path where Arcgis metadata stylesheet files are stored in.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.GetVersion">
	<summary>
 Returns the application version when called by the main assembly.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.stripNonAlphanumeric(System.String@,System.String)">
	<summary>
 Returns  <paramref name="origStr"/> with non-alphanumeric characters stripped out.
 Each stripped out character is replaced by the contents of <paramref name="replaceWith"/> if specified.
 </summary>
</member><member name="M:MetadataEditor.Utils.ErrorHandler(System.Exception)">
	<summary>
 Prints debugging information to a dialog window based on exception information 
 passed in <paramref name="ex"/>.
 </summary>
</member><member name="M:MetadataEditor.Utils.GetAssociatedProgram(System.String)">
	<summary>
 Returns the path to the application associated with the specified file extension.
 Returns empty string, if none found in Windows registry.
 </summary>
</member><member name="M:MetadataEditor.Utils.OpenInIE(System.String)">
	<summary>
 Attemps to open the specified URL using Internet Explorer.
 </summary>
</member><member name="M:MetadataEditor.Utils.OpenWitDefaultFileHandler(System.String)">
	<summary>
 Attemps to open the specified URL using default file handler.
 </summary>
</member><member name="M:MetadataEditor.Utils.openMSAccess(System.String)">
	<summary>
 Runs MSAccess application. 
 If the name of a macro is specified, the macro is run by MSAccess upon startup.
 </summary>
</member><member name="M:MetadataEditor.Utils.readerForSQL(System.String,System.Data.OleDb.OleDbConnection@)">
	<summary>
 Returns a data reader object for the provided SQL string.
 The caller is responsible for proper cleanup after reader is no longer needed.
 </summary>
</member><member name="M:MetadataEditor.Utils.datatableFromSQL(System.String)">
	<summary>
 COnstruct a DataTable object using the provided SQL query text.
 </summary>
	<param name="SQLStr">SQL query text</param>
	<returns>A DataTable object obtained by executing the provided SQL against source database.</returns>
	<remarks>The resulting record structure needs to contain an "OrderedId" field with unique values for correct operation.</remarks>
</member><member name="M:MetadataEditor.Utils.nv(System.Object,System.Object)">
	<summary>
 Function to return the provided object's value if not null or nothing. Otherwise return the provided default value.
 </summary>
	<param name="o">Object</param>
	<param name="defaultValue">Default value if the object has no value</param>
	<returns>return the provided object's value if not null or nothing. Otherwise return the provided default value.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.ColumnEqual(System.Object,System.Object)">
	<summary>
 Compares two values to determine if they are equal. Also compares DBNULL.Value.
 </summary>
	<param name="A">First value to compare</param>
	<param name="B">Second value to compare</param>
	<returns>Returns true if two values are equal or both are null. Otherwise, returns false.</returns>
	<remarks>Based on http://support.microsoft.com/default.aspx?scid=kb;EN-US;325684 </remarks>
</member><member name="M:MetadataEditor.Utils.SelectDistinct(System.String,System.Data.DataView,System.String,System.String)">
	<summary>
 Construct a copy of a DataView by applying a filter and removing duplicate rows. 
 </summary>
	<param name="TableName">Name of DataTable object to be created</param>
	<param name="SourceView">DataView object that has the rows to be filtered</param>
	<param name="FieldName">Name of field in SourceView that needs to be distinct</param>
	<param name="filter">Filter string to apply</param>
	<returns>A DataView object suitable for use as data source to a combo box. The rows in SourceView are filtered and copied to a
 a new DataTable only if the distinct field value has not been seen before.</returns>
	<remarks>Based on http://support.microsoft.com/default.aspx?scid=kb;EN-US;325684 </remarks>
</member><member name="M:MetadataEditor.Utils.textToTempFile(System.String,System.String)">
	<summary>
 Write out the provided text to to a new temporary file.
 </summary>
	<param name="txt">Text to write to a file</param>
	<returns>Full pathname of the temporary file that was created.</returns>
	<remarks>File is created with .xml extension and the provided content must be in XML format.</remarks>
</member><member name="M:MetadataEditor.Utils.decorateXSL(System.String,System.Boolean)">
	<summary>
 Decorate XML snippet returned from the validation service turning it into a proper XML file
 and inserting an XSL stylesheet.
 </summary>
	<param name="xmlStr">XML snippet</param>
	<returns>Valid XML text</returns>
	<remarks>The right way to do this is to do DOM manipulation but this works.</remarks>
</member><member name="M:MetadataEditor.Utils.mergeEPAandMP(System.String,System.String)">
	<summary>
 Utility function to merge EPA schematron validation results with MP validation results.
 </summary>
	<param name="epaResults">EPA schematron validation results as XML snippet</param>
	<param name="mpResults">MP validation results as XML snippet</param>
	<returns></returns>
	<remarks>The right way to do this is to do DOM manipulation but this works.</remarks>
</member><member name="M:MetadataEditor.Utils.getLastSessionXMLPath">
	<summary>
 Get the fully qualified filename for the file that contains a previously saved session.
 </summary>
	<returns>String containing the path.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.checkForPreviouslySavedSession">
	<summary>
 Check if a previously saved session exists.
 </summary>
	<returns>True if a previously saved session is found on the filesystem. False otherwise.</returns>
	<remarks>The saved session must be from a previous EME session, not the one currently active.</remarks>
</member><member name="M:MetadataEditor.Utils.promptAndRecoverSavedSession">
	<summary>
 Prompt the user for recovering a previously saved session.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.deleteSavedSession">
	<summary>
 Delete the file containing a previously saved session.
 </summary>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.getFromSingleValuedSQL(System.String)">
	<summary>
 Get the value of the first field of an SQL expression that returns a single record.
 </summary>
	<param name="SQLStr">SQL expression to evaluate</param>
	<returns>Field value as Object</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.getTagParent(System.String)">
	<summary>
 Get the parent tag of a given XSL pattern.
 </summary>
	<param name="name">XSL pattern whose parent is sought</param>
	<returns></returns>
	<remarks>Warning: This will not work with some names that have qualifiers involving a slash character.</remarks>
</member><member name="M:MetadataEditor.Utils.xslTransform(System.String,System.String,System.String)">
	<summary>
 Apply an XSL transform to an XML file.
 </summary>
	<param name="xslfile">Full filepathname of the XSLT file</param>
	<param name="fin">Full filepathname of the input file</param>
	<param name="fout">Full filepathname of the output file</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.xslTransformViaCOM(System.String,System.String,System.String)">
	<summary>
 Perform XSL transformation via the COM library MSXML2.
 </summary>
	<param name="xslFile">Full path to the XSL transformation file</param>
	<param name="fin">Full path to the XML file to be transformed</param>
	<param name="fout">Full path to the file that will receive the output of the XSL transformation</param>
	<remarks>This is just a different wrapper around the actual function that performs the transform.</remarks>
</member><member name="M:MetadataEditor.Utils.xslTransformViaCOM(System.String,System.String)">
	<summary>
 Perform XSL transformation via the COM library MSXML2.
 </summary>
	<param name="xslFile"></param>
	<param name="xmlStr"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.wipeEsriTags(MetadataEditor.XmlMetadata)">
	<summary>
 Remove ESRI tags in metadata.
 </summary>
	<param name="iXPS">IXmlPropertySet that contains the metadata being edited.</param>
	<returns>True if metadata was modified (i.e. at least one ESRI tag removed). False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.DeserializeFromXmlFile(System.String,System.Type)">
	<summary>
 XML file deserializer.
 </summary>
	<param name="filename">String containing the filename for an XML file that will be deserialized.</param>
	<param name="targetType">The type that the XML file will be deserialized into.</param>
	<returns>An instance of the requested type deserialized from the XML file provided.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.findAndReplaceWithCount(System.String@,System.String,System.String)">
	<summary>
 Function that will substitute instances of a string with another string in some text 
 and report back the no of substitutions made.
 </summary>
	<param name="txt">String containing the text to operate on.</param>
	<param name="oldValue">String to be replaced.</param>
	<param name="newValue">String to substitute.</param>
	<returns>Integer indicating the no of substitutions made.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.IsAlphaNumeric(System.String)">
	<summary>
 Determine if the given string consist only of alphanumeric characters
 </summary>
	<param name="str">String to be tested</param>
	<returns>True if str contains only alphanumeric characters, false otherwise.</returns>
	<remarks>At least one character is required</remarks>
</member><member name="M:MetadataEditor.Utils.IsNumeric(System.String)">
	<summary>
 Determine if the given string consist only of numeric characters
 </summary>
	<param name="str">String to be tested</param>
	<returns>True if str contains only numeric characters, false otherwise.</returns>
	<remarks>At least one character is required</remarks>
</member><member name="M:MetadataEditor.Utils.copyDir(System.String,System.String,System.IO.SearchOption)">
	<summary>
 Copy source directory with given path to given target directory path.
 </summary>
	<param name="sourceDir">Full path to source directory</param>
	<param name="targetDir">Full path to target directory</param>
	<param name="searchOption">Whether only top level files are included from source directory or all files and directories under it. Defaults to all.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.uncopyDir(System.String,System.String,System.IO.SearchOption)">
	<summary>
 Undo of copy source directory with given path to given target directory path. 
 </summary>
	<param name="sourceDir">Full path to source directory</param>
	<param name="targetDir">Full path to target directory</param>
	<param name="searchOption">Whether only top level files are included from source directory or all files and directories under it. Defaults to all.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.copyDirPerformed(System.String,System.String,System.IO.SearchOption)">
	<summary>
 Check if copy of source directory with given path to given target directory path has been performed previously.
 </summary>
	<param name="sourceDir">Full path to source directory</param>
	<param name="targetDir">Full path to target directory</param>
	<param name="searchOption">Whether only top level files are included from source directory or all files and directories under it. Defaults to all.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.checkAndCopyTemplate">
	<summary>
 Copy the contents of the template folder to the user's AppData system/special folder.
 </summary>
	<returns></returns>
	<remarks>We need this because each user has to work in folders reserved for them due to increasing security/privacy restrictions in Windows operating systems.</remarks>
</member><member name="M:MetadataEditor.Utils.transform(System.String,System.String,System.String)">
	<summary>
 Apply an XSL transform to an XML file.
 </summary>
	<param name="xslfile">Full filepathname of the XSLT file</param>
	<param name="fin">Full filepathname of the input file</param>
	<param name="fout">Full filepathname of the output file</param>
	<remarks>.NET way to do XSL transform does not work so well for some stylesheets from the "XSL Patterns" era. Currently not used.</remarks>
</member><member name="M:MetadataEditor.Utils.HelpSeeker(System.String,System.Diagnostics.Process@)">
	<summary>
 The workhorse subroutine to do actual work of displaying help from a .chm file.
 </summary>
	<param name="helpPage">Default help page to display if no help for requiested name can be found.</param>
	<remarks>We let only one help page open at a time. This is by design.</remarks>
</member><member name="M:MetadataEditor.Utils.stringMd5(System.String)">
	<summary>
 Compute the MD5 digest of the given text.
 </summary>
	<param name="SourceText">The text for which MD5 digest is to be computed.</param>
	<returns>MD5 digest of the given text.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.fileMd5(System.String)">
	<summary>
 Compute the MD5 digest of the text in the given file.
 </summary>
	<param name="srcFile">Full path name of the file which MD5 digest is to be computed for.</param>
	<returns>MD5 digest of the given file.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.iAmInstalled">
	<summary>
 Determine if we are running as an installed app or from within VS IDE.
 </summary>
	<returns>True if application/extension is running in the field as an installed app, False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.ValidateActionDo(System.Collections.Hashtable)">
	<summary>
 Perform metadata validation using MP and schematron rules (for EPA compliance)
 using webservice or local validation.
 </summary>
	<param name="args">Hashtable containing arguments to be used during validation.</param>
	<returns>Boolean value indication successful completion.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.withoutDoctype(System.String)">
	<summary>
 Remove the DOCTYPE declaration in the metadata record - if it exists.
 </summary>
	<param name="mdXml">XML metadata record.</param>
	<returns>The metadata record after removal of DOCTYPE declaration.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.isWellFormedXmlFile(System.String)">
	<summary>
 Determine if the given file contains well-formed XML.
 </summary>
	<param name="filename">Full path to the file to be tested.</param>
	<returns>True if file contains well-formed XML, False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.isWellFormedXmlString(System.String)">
	<summary>
 Determine if the given text contains well-formed XML.
 </summary>
	<param name="txt">Text to be tested.</param>
	<returns>True if the text contains well-formed XML, False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.asSafeFilename(System.String,System.String,System.Boolean)">
	<summary>
 Turn the given filename into a valid Windows filename.
 </summary>
	<param name="filename">Filename to operate on</param>
	<returns>Returns the filename modified by replacing any invalid characters with underscore character.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.filenameAsUrl(System.String)">
	<summary>
 Turn file reference to a URL.
 </summary>
	<param name="filename">Full path to the file</param>
	<returns>A String containing the URL reference to the given file.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.getRegistryString(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
	<summary>
 Get a string value from the registry
 </summary>
	<param name="regkey">Registry hive to look under</param>
	<param name="subkey">Registry subkey to look under</param>
	<param name="keyname">Name of requested registry key</param>
	<param name="defaultValue">Default value to return if key not found</param>
	<returns>The full path of the directory where ArcGIS Desktop 10.0 has been installed.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.getArcgisInstallDir">
	<summary>
 Get the location of ArcGIS installation
 </summary>
	<returns>The full path of the directory where ArcGIS Desktop 10.0 has been installed.</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.cleanseUtf16(System.String@)">
	<summary>
 Remove the utf-16 encoding attribute from xml header as it is typically incorrect
 </summary>
	<param name="md">The string containing metadata to cleanse. Passed by reference, hence changed in place if needed.</param>
	<returns>String containing cleansed metadata</returns>
	<remarks>Will we ever stumble on metadata actually in utf-16?</remarks>
</member><member name="M:MetadataEditor.Utils.disableLinkLabelTabStops(System.Windows.Forms.Control)">
	<summary>
 Prevent LinkLabel objects from becoming tab stops.
 </summary>
	<param name="ctrl">Control to check</param>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.decorateCountPhrase(System.String,System.Int32)">
	<summary>
 Prettier expression of a count
 </summary>
	<param name="txt">Name of stuff to be counted</param>
	<param name="count">The count to use</param>
	<returns>Decorated expression</returns>
	<remarks></remarks>
</member><member name="M:MetadataEditor.Utils.changeExtensionTo(System.String,System.String)">
	<summary>
 Return the same filename with a new extension
 </summary>
	<param name="filename">Name of the file</param>
	<param name="newExtension">New extension for file</param>
	<returns></returns>
	<remarks>If the file does not have an extension (no .), then we simply append the new extension.</remarks>
</member><member name="M:MetadataEditor.Utils.exportMetadataWithMp(System.String,System.String,System.Collections.Generic.List{System.String})">
	<summary>
 Use MP to save metadata in formats other than XML 
 </summary>
	<param name="filepath">The filesystem path where files will be stored.</param>
	<param name="xmlFilename">Name of the XML file</param>
	<param name="selectedFormats">Formats to generate</param>
	<remarks></remarks>
</member><member name="T:MetadataEditor.Utils">
	<summary>
 Miscellenaous utility functions utilized by EME.
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>