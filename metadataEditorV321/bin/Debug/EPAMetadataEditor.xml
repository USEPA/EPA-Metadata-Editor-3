<?xml version="1.0"?>
<doc>
<assembly>
<name>
EPAMetadataEditor
</name>
</assembly>
<members>
<member name="P:EPAMetadataEditor.EMEConfig.MdbFilepathname">
	<remarks/>
</member><member name="T:EPAMetadataEditor.EMEConfig">
	<remarks/>
</member><member name="P:EPAMetadataEditor.NewDataSet.Items">
	<remarks/>
</member><member name="T:EPAMetadataEditor.NewDataSet">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.#ctor">
	<remarks/>
</member><member name="E:EPAMetadataEditor.Validator.validate_mpCompleted">
	<remarks/>
</member><member name="E:EPAMetadataEditor.Validator.validate_epaCompleted">
	<remarks/>
</member><member name="E:EPAMetadataEditor.Validator.date_changedCompleted">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.validate_mp(System.String)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.Beginvalidate_mp(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.Endvalidate_mp(System.IAsyncResult)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.validate_mpAsync(System.String)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.validate_mpAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.validate_epa(System.String)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.Beginvalidate_epa(System.String,System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.Endvalidate_epa(System.IAsyncResult)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.validate_epaAsync(System.String)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.validate_epaAsync(System.String,System.Object)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.date_changed">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.Begindate_changed(System.AsyncCallback,System.Object)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.Enddate_changed(System.IAsyncResult)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.date_changedAsync">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.date_changedAsync(System.Object)">
	<remarks/>
</member><member name="M:EPAMetadataEditor.Validator.CancelAsync(System.Object)">
	<remarks/>
</member><member name="T:EPAMetadataEditor.Validator">
	<remarks>
This source code was auto-generated by wsdl, Version=2.0.50727.42.
</remarks>
</member><member name="T:EPAMetadataEditor.validate_mpCompletedEventHandler">
	<remarks/>
</member><member name="P:EPAMetadataEditor.validate_mpCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:EPAMetadataEditor.validate_mpCompletedEventArgs">
	<remarks/>
</member><member name="T:EPAMetadataEditor.validate_epaCompletedEventHandler">
	<remarks/>
</member><member name="P:EPAMetadataEditor.validate_epaCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:EPAMetadataEditor.validate_epaCompletedEventArgs">
	<remarks/>
</member><member name="T:EPAMetadataEditor.date_changedCompletedEventHandler">
	<remarks/>
</member><member name="P:EPAMetadataEditor.date_changedCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:EPAMetadataEditor.date_changedCompletedEventArgs">
	<remarks/>
</member><member name="M:EPAMetadataEditor.ArcCatalogExtension.ArcGISCategoryRegistration(System.Type)">
	<summary>
 Required method for ArcGIS Component Category registration -
 Do not modify the contents of this method with the code editor.
 </summary>
</member><member name="M:EPAMetadataEditor.ArcCatalogExtension.ArcGISCategoryUnregistration(System.Type)">
	<summary>
 Required method for ArcGIS Component Category unregistration -
 Do not modify the contents of this method with the code editor.
 </summary>
</member><member name="M:EPAMetadataEditor.ArcCatalogExtension.#ctor">
	<summary>
	</summary>
	<remarks>A creatable COM class must have a Public Sub New() 
 with no parameters, otherwise, the class will not be 
 registered in the COM registry and cannot be created 
 via CreateObject.
 </remarks>
</member><member name="P:EPAMetadataEditor.ArcCatalogExtension.Name">
	<summary>
 Name of extension. Do not exceed 31 characters
 </summary>
</member><member name="M:EPAMetadataEditor.ArcCatalogExtension.Shutdown">
	<summary>
 Clean up while ArcCatalog is shutting down this extension.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.ArcCatalogExtension.Startup(System.Object@)">
	<summary>
 Initialization activities while ArcCatalog is starting up this extension.
 </summary>
	<param name="initializationData"></param>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.ArcCatalogExtension">
	<summary>
 EME is implemented as an extension to ArcCatalog using the IExtension interface
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SynchronizerHelper.ArcGISCategoryRegistration(System.Type)">
	<summary>
 Required method for ArcGIS Component Category registration -
 Do not modify the contents of this method with the code editor.
 </summary>
</member><member name="M:EPAMetadataEditor.SynchronizerHelper.ArcGISCategoryUnregistration(System.Type)">
	<summary>
 Required method for ArcGIS Component Category unregistration -
 Do not modify the contents of this method with the code editor.
 </summary>
</member><member name="M:EPAMetadataEditor.SynchronizerHelper.#ctor">
	<summary>
	</summary>
	<remarks>A creatable COM class must have a Public Sub New() 
 with no parameters, otherwise, the class will not be 
 registered in the COM registry and cannot be created 
 via CreateObject.
 </remarks>
</member><member name="P:EPAMetadataEditor.SynchronizerHelper.ClassID1">
	<summary>
 Implements IMetadataSynchronizer.ClassID
 </summary>
	<returns>A unique identifier for this IMetadataSynchronizer.</returns>
	<remarks></remarks>
</member><member name="P:EPAMetadataEditor.SynchronizerHelper.Name">
	<summary>
 Implements IMetadataSynchronizer.Name
 </summary>
	<returns>A string containing the name of this IMetadataSynchronizer.</returns>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.SynchronizerHelper.scoutingData">
	<summary>
 List of names of items being synchronized
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SynchronizerHelper.Update(ESRI.ArcGIS.Geodatabase.IXmlPropertySet,System.String,System.Object)">
	<summary>
 Implements IMetadataSynchronizer.Update
 </summary>
	<param name="iXPS">IXmlPropertySet that contains the metadata being synchronized.</param>
	<param name="itemDesc">Name of the metadata element being synchronized.</param>
	<param name="value">Value for the metadata element being synchronized.</param>
	<remarks>Please refer to ESRI metadata synchronization documents to understand the synchronization API.</remarks>
</member><member name="T:EPAMetadataEditor.SynchronizerHelper">
	<summary>
 EPA Synchronizer implementation helper.
 Implements IMetadataSynchronizer interface.
 You never see or intereact with this directly.
 </summary>
	<remarks>Relies on the FGDC Synchronizer to do much of its work.</remarks>
</member><member name="F:EPAMetadataEditor.SyncManagerForm.msm">
	<summary>
 Get a hold of ArcObjects' MetadataSynchronizer that controls all registered synchronizers.
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.SyncManagerForm.MdSyncAdapter.innerObject">
	<summary>
 The object being wrapped
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerForm.MdSyncAdapter.#ctor(ESRI.ArcGIS.Geodatabase.IMetadataSynchronizer)">
	<summary>
 Create a wrapped object.
 </summary>
	<param name="o">An IMetadataSynchronizer to be wrapped.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerForm.MdSyncAdapter.ToString">
	<summary>
 Get String representation of wrapped object.
 </summary>
	<returns>A string containing the wrapped object's name.</returns>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.SyncManagerForm.MdSyncAdapter">
	<summary>
 Simple wrapper class to use IMetadataSynchronizer objects as list items.
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.SyncManagerForm.idxEpaSynchronizerHelper">
	<summary>
 Index of the EPA Synchronizer Helper in the list of syncers
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerForm.#ctor">
	<summary>
 Initialize the form.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerForm.btnExit_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to close the form
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerForm.btnSave_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to save settings and close the form.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerForm.tcEPASync_SelectedIndexChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler to keep track of the EPA Synchronizer tab selected.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerForm.Help_Synchronizer_____help_Click(System.Object,System.EventArgs)">
	<summary>
 Event handler to provide help about the form.
 </summary>
	<param name="sender">Event sender. Not used.</param>
	<param name="e">Event arguments. Not used.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerForm.clbSynchronizers_ItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
	<summary>
 Event handler 
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerForm.cbWipeEsriTagsOnSync_CheckedChanged(System.Object,System.EventArgs)">
	<summary>
 Event handler to enable/disable "Retain PublishedDocID" setting
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.SyncManagerForm">
	<summary>
 Windows Forms form that provides a user interface for controlling
 metadata synchronization options.
 </summary>
	<remarks></remarks>
</member><member name="P:EPAMetadataEditor.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:EPAMetadataEditor.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:EPAMetadataEditor.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="F:EPAMetadataEditor.SyncManagerCommand.gxApp">
	<summary>
 Reference to ArcCatalog instance
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerCommand.#ctor">
	<summary>
 Create and initialize.
 </summary>
	<remarks>A creatable COM class must have a Public Sub New() 
 with no parameters, otherwise, the class will not be 
 registered in the COM registry and cannot be created 
 via CreateObject.
 </remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerCommand.OnCreate(System.Object)">
	<summary>
 Event handler that gets called when an instance is created. Used to get a hold of ArcCatalog.
 </summary>
	<param name="hook"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncManagerCommand.OnClick">
	<summary>
 Event handler that opens the form for managing syncronizers.
 </summary>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.SyncManagerCommand">
	<summary>
 Class that implements a user interface for controlling (turning on/off) synchronizers
 and also controlling the EPA Synchronizer options.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.EsriXslExtSim.strtoupper(System.String)">
	<summary>
 Convert to uppercase
 </summary>
	<param name="s">String to operate on</param>
	<returns>String value containing the uppercase form of the given input string.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.EsriXslExtSim.strtolower(System.String)">
	<summary>
 Convert to lowercase
 </summary>
	<param name="s">String to operate on</param>
	<returns>String value containing the lowercase form of the given input string.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.EsriXslExtSim.decodenodeset(System.String)">
	<summary>
 Deserialize nodeset
 </summary>
	<param name="s">String containing the serialized form of a nodeset</param>
	<returns>XPathNavigator objects for navigating the nodeset</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.EsriXslExtSim.v(System.String)">
	<summary>
 Used only for testing
 </summary>
	<param name="s"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.EsriXslExtSim">
	<summary>
 This class simulates the ESRI XSLT extension functions used in ESRI2FGDC.xsl
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.errorxml(System.String,System.String,System.String,System.String)">
	<summary>
 Generate an XML snippet (for use in metadata validation error reporting) with the provided information.
 </summary>
	<param name="type">Type of validation issue</param>
	<param name="message">Message describing the issue</param>
	<param name="linenum">Metadata XML file line number if available</param>
	<param name="errid">An identifier for the element with the reported issue if available. Constructed using the XPath for the element</param>
	<returns>Returns a string containing the XML snippet.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.escapeXml(System.String)">
	<summary>
 Replace special XML characters with their escape codes
 </summary>
	<param name="txt">Text to be XML-escaped</param>
	<returns>A String with content XML-escaped.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.validate_mp(System.String,System.String)">
	<summary>
 Perform MP validation on the provided XML metadata record.
 </summary>
	<param name="root_dir">Root directory for EME.</param>
	<param name="inxml">Metadata XML to be validated.</param>
	<returns>Returns an XML snippet containing issues found with the metadata record</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.validate_epa(System.String,System.String)">
	<summary>
 Perform EPA validation on the provided XML metadata record.
 </summary>
	<param name="root_dir">Root directory for EME</param>
	<param name="inxml">Metadata XML to be validated</param>
	<returns>Returns an XML snippet containing issues found with the metadata record</returns>
	<remarks>Utilizes a Schematron generated XSL transform to identify issues with respect to metadata rules that EPA enforces. 
 Needs to be made optional to better accomodate non-EPA users.</remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.transform_epa(System.String,System.String,System.String,System.String)">
	<summary>
 Apply an XSL transform to an XML file.
 </summary>
	<param name="xslfile">Full filepathname of the XSLT file</param>
	<param name="fin">Full filepathname of the input file</param>
	<param name="fout">Full filepathname of the output file</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.type_to_dir(System.String)">
	<summary>
 Given the type of validation, return the subdirectory name to use.
 </summary>
	<param name="type">Validation type</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.file_in(System.String,System.String,System.String)">
	<summary>
 Write file with given name and contents under appropriate validation subdirectory to feed into the validation system.
 </summary>
	<param name="type">Validation type</param>
	<param name="fname">Filename</param>
	<param name="contents">File contents</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.file_out(System.String,System.String)">
	<summary>
 Read file with given name under appropriate validation subdirectory to get feed back from the validation system.
 </summary>
	<param name="type">Validation type</param>
	<param name="fname">Filename</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.date_changed(System.String)">
	<summary>
 Return date that validation rules were last updated
 </summary>
	<param name="root_dir">Root directory for EME install</param>
	<returns></returns>
	<remarks>Relies on "date_changed.xml" file. Only useful on the server side.</remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.delete_files(System.String,System.String)">
	<summary>
 Delete files in MP or EPA subdirectory matching the given name specification.
 </summary>
	<param name="type">Type ("mp" or "epa")</param>
	<param name="fname">Filename starts with this string</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.parseErrors(System.String,System.String,System.String@)">
	<summary>
 Parse errors and warnings in MP output.
 </summary>
	<param name="errorFileName">Fully qualified filename for the file that contains MP output.</param>
	<param name="inputFile">Fully qualified filename for the metadata file.</param>
	<param name="ans">This parameter is not used. Should be removed and locally declared.</param>
	<returns>Returns an XML snippet containing errors/warnings found with the metadata record </returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.LocalValidator.runMP(System.String,System.String,System.String,System.String@)">
	<summary>
 Run the mp_win.exe application.
 </summary>
	<param name="workdir">Working directory where mp_win.exe resides and temporary files are created.</param>
	<param name="outputFile">Output filename where MP output will go.</param>
	<param name="errorFileName">Error filename where MP errors will go.</param>
	<param name="ans">Anny errors that occur will be reported in this parameter passed by reference.</param>
	<returns>True if successful. False otherwise.</returns>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.AoUtils.metability">
	<summary>
 Values representing an object's metadata capability (from the user's perspective).
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.AoUtils.getSelectedObjects(ESRI.ArcGIS.CatalogUI.IGxApplication@,EPAMetadataEditor.AoUtils.metability)">
	<summary>
 Get the objects that are selected in ArcCatalog UI
 </summary>
	<param name="gxApp"></param>
	<param name="filter"></param>
	<returns>List of IGxObject objects that are selected.</returns>
	<remarks>This works whether selection in made in contents pane or TOC view.</remarks>
</member><member name="M:EPAMetadataEditor.AoUtils.canWriteMetadata(ESRI.ArcGIS.Catalog.IGxObject)">
	<summary>
 Determine if we can write metadata to the given object.
 </summary>
	<param name="pGxObj">The object being queired for metadata capability.</param>
	<returns>True if we can write metadata to the goven object, False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.AoUtils.hasMetadata(ESRI.ArcGIS.Catalog.IGxObject)">
	<summary>
 Determine if an object has metadata.
 </summary>
	<param name="pGxObj">The object being queried for metadata.</param>
	<returns>True if the object has metadata. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.AoUtils.canHaveMetadata(ESRI.ArcGIS.Catalog.IGxObject)">
	<summary>
 Determine if an object can have metadata.
 </summary>
	<param name="pGxObj">The object being queried.</param>
	<returns>True if the object can have metadata. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.AoUtils.getMdProperty(ESRI.ArcGIS.Geodatabase.IMetadata,System.String)">
	<summary>
 Get a property value.
 </summary>
	<param name="imd">The IMetadata object being queried.</param>
	<param name="propName">The name (effectively the xpath expression) for the property</param>
	<returns>Value of the property.</returns>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.AoUtils">
	<summary>
 Metadata utilities that need to reference ArcObjects libraries are defined here.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.ExportMetadataCommand.OnCreate(System.Object)">
	<summary>
 Event handler to initialize the command when created.
 </summary>
	<param name="hook"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.ExportMetadataCommand.OnClick">
	<summary>
 Event handler to carry out batch export when button is clicked.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.ExportMetadataCommand.makeMdFilename(ESRI.ArcGIS.Catalog.IGxObject,System.Int32)">
	<summary>
 Generate a filename for the metadata record
 </summary>
	<param name="o">The IGxObject for which a metadata filename is to be generated</param>
	<param name="idx">An Integer index to use in filename. Useful when generating metadata files in batch.</param>
	<returns>String containing filename generated.</returns>
	<remarks>Currently uses object name, metadata title and optionally an index number to generate a filename.</remarks>
</member><member name="M:EPAMetadataEditor.ExportMetadataCommand.saveMdToFile(ESRI.ArcGIS.Geodatabase.IMetadata,System.String,System.String,System.Collections.Generic.List{System.String})">
	<summary>
 Write metadata record to file.
 </summary>
	<param name="imd">IMetadata object with metadata to write to file.</param>
	<param name="filename">The filename to use for the file.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.ClearAllMetadataCommand.OnCreate(System.Object)">
	<summary>
 Event handler to initialize the command when created.
 </summary>
	<param name="hook"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.ClearAllMetadataCommand.OnClick">
	<summary>
 Event handler to carry out batch metadata clearing when button is clicked.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.EditCommand.OnCreate(System.Object)">
	<summary>
 Event handler to initialize the command when created.
 </summary>
	<param name="hook"></param>
	<remarks></remarks>
</member><member name="P:EPAMetadataEditor.EditCommand.Enabled">
	<summary>
 Indicate whether the command (and its button) should be enabled.
 </summary>
	<value></value>
	<returns>True to enable. False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.EditCommand.OnClick">
	<summary>
 Event handler to start editor when button is clicked.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.MasterController.RegisterFunction(System.Type)">
	<summary>
 Register EME with COM
 </summary>
	<param name="registerType"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.MasterController.UnregisterFunction(System.Type)">
	<summary>
 Unregister EME with COM
 </summary>
	<param name="registerType"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.MasterController.ArcGISCategoryRegistration(System.Type)">
	<summary>
 Required method for ArcGIS Component Category registration -
 Do not modify the contents of this method with the code editor.
 </summary>
</member><member name="M:EPAMetadataEditor.MasterController.ArcGISCategoryUnregistration(System.Type)">
	<summary>
 Required method for ArcGIS Component Category unregistration -
 Do not modify the contents of this method with the code editor.
 </summary>
</member><member name="F:EPAMetadataEditor.MasterController.ClassId">
	<summary>
 Class GUID.
 </summary>
	<remarks>
 Be sure to change this so your editor does not conflict with EPA Metadata Editor
 and can run side by side with it.
 </remarks>
</member><member name="F:EPAMetadataEditor.MasterController.InterfaceId">
	<summary>
 Interface GUID.
 </summary>
	<remarks>
 Be sure to change this so your editor does not conflict with EPA Metadata Editor
 and can run side by side with it.
 </remarks>
</member><member name="F:EPAMetadataEditor.MasterController.EventsId">
	<summary>
 Events GUID.
 </summary>
	<remarks>
 Be sure to change this so your editor does not conflict with EPA Metadata Editor
 and can run side by side with it.
 </remarks>
</member><member name="M:EPAMetadataEditor.MasterController.Edit(ESRI.ArcGIS.esriSystem.IPropertySet,System.Int32)">
	<summary>
 Main entry point into metadata editor when initiated by ArcCatalog
 </summary>
	<param name="metadata">Metadata record copy to be edited.</param>
	<param name="hWnd">Handle to the metadata editor window.</param>
	<returns>
 Boolean return value indicates if the metadata record was modified by the editor
 </returns>
	<remarks>With the advent of standalone editor, this is now a wrapper around it.</remarks>
</member><member name="P:EPAMetadataEditor.MasterController.Name1">
	<summary>
 Sets the name for this editor - this name will appear in the
 list of metadata editors in ArcCatalog's Options dialog box
 </summary>
	<returns>String containing the name of this metadata editor.</returns>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.MasterController">
	<summary>
 MasterController implements the IMetadataEditor interface and acts as the glue between ArcCatalog and EME.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.ArcGISCategoryRegistration(System.Type)">
	<summary>
 Required method for ArcGIS Component Category registration -
 Do not modify the contents of this method with the code editor.
 </summary>
</member><member name="M:EPAMetadataEditor.Synchronizer.ArcGISCategoryUnregistration(System.Type)">
	<summary>
 Required method for ArcGIS Component Category unregistration -
 Do not modify the contents of this method with the code editor.
 </summary>
</member><member name="M:EPAMetadataEditor.Synchronizer.#ctor">
	<summary>
	</summary>
	<remarks>A creatable COM class must have a Public Sub New() 
 with no parameters, otherwise, the class will not be 
 registered in the COM registry and cannot be created 
 via CreateObject.
 </remarks>
</member><member name="P:EPAMetadataEditor.Synchronizer.ClassID1">
	<summary>
 Implements IMetadataSynchronizer.ClassID
 </summary>
	<returns>A unique identifier for this IMetadataSynchronizer.</returns>
	<remarks></remarks>
</member><member name="P:EPAMetadataEditor.Synchronizer.Name">
	<summary>
 Implements IMetadataSynchronizer.Name
 </summary>
	<returns>A string containing the name of this IMetadataSynchronizer.</returns>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.Synchronizer.preExisting">
	<summary>
 List of tags registered as existing prior to syncing
 </summary>
	<remarks>This list only includes tags at risk of being removed during sync.</remarks>
</member><member name="F:EPAMetadataEditor.Synchronizer.xmlDecl">
	<summary>
 Stores the xml declaration (if any) prior to syncing
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.Synchronizer.origXml">
	<summary>
 Original XML prior to syncing
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.Update(ESRI.ArcGIS.Geodatabase.IXmlPropertySet,System.String,System.Object)">
	<summary>
 Implements IMetadataSynchronizer.Update
 </summary>
	<param name="iXPS">IXmlPropertySet that contains the metadata being synchronized.</param>
	<param name="itemDesc">Name of the metadata element being synchronized.</param>
	<param name="value">Value for the metadata element being synchronized.</param>
	<remarks>Please refer to ESRI metadata synchronization documents to understand the synchronization API.</remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.UpdateManual(ESRI.ArcGIS.Geodatabase.IXmlPropertySet,System.String,System.Object)">
	<summary>
 Does the actual IMetadataSynchronizer.Update work if syncing was initiated by user from the toolbar.
 </summary>
	<param name="iXPS">IXmlPropertySet that contains the metadata being synchronized.</param>
	<param name="itemDesc">Name of the metadata element being synchronized.</param>
	<param name="value">Value for the metadata element being synchronized.</param>
	<remarks>Please refer to ESRI metadata synchronization documents to understand the synchronization API.</remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.UpdateAuto(ESRI.ArcGIS.Geodatabase.IXmlPropertySet,System.String,System.Object)">
	<summary>
 Does the actual IMetadataSynchronizer.Update work if syncing was initiated automatically by ArcCatalog.
 </summary>
	<param name="iXPS">IXmlPropertySet that contains the metadata being synchronized.</param>
	<param name="itemDesc">Name of the metadata element being synchronized.</param>
	<param name="value">Value for the metadata element being synchronized.</param>
	<remarks>Please refer to ESRI metadata synchronization documents to understand the synchronization API.</remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.captureXmlDecl(ESRI.ArcGIS.Geodatabase.IXmlPropertySet)">
	<summary>
 This appears to be the only way to capture the xml declaration header fully.
 </summary>
	<param name="iXPS"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.preSyncBuildup(EPAMetadataEditor.XmlMetadata,System.Boolean)">
	<summary>
 Initialize the list of pre-existing elements at risk of being removed.
 </summary>
	<param name="ixps"></param>
	<param name="isNew"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.postSyncCleanup(EPAMetadataEditor.XmlMetadata)">
	<summary>
 Unwanted side effects of the FGDC Synchronizer are cleaned up here (for FGDC compliance)
 </summary>
	<param name="ixps">IXmlPropertySet that contains the metadata being synchronized.</param>
	<remarks>We only clean up unwanted tags that were generated during our sync operations.</remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.registerIfPreExisting(EPAMetadataEditor.XmlMetadata,System.String)">
	<summary>
 Registers the name as a tag that existed before sync operation made any modifications to metadata.
 </summary>
	<param name="ixps">IXmlPropertySet that contains the metadata being synchronized.</param>
	<param name="name">The xsl pattern identifying the element being synchronized.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.deleteIfNotPreExisting(EPAMetadataEditor.XmlMetadata,System.String)">
	<summary>
 Deletes the name if it did not exist before sync operation made any modifications to metadata.
 </summary>
	<param name="ixps">IXmlPropertySet that contains the metadata being synchronized.</param>
	<param name="name">The xsl pattern identifying the element being synchronized.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.handleExceptionInner(System.String,System.Exception)">
	<summary>
 Exception handler. Used only for debugging.
 </summary>
	<param name="typ">A string describing the type of exception caught.</param>
	<param name="ex">Exception object.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.slurp(EPAMetadataEditor.XmlMetadata)">
	<summary>
 Extract FGDC elements from synced metadata by applying ArcGIS to FGDC transformation.
 </summary>
	<param name="mdSync">Synced metadata record</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.syncEntInfo(EPAMetadataEditor.XmlMetadata,EPAMetadataEditor.XmlMetadata)">
	<summary>
 Merge entity (and attribute) info in two metadata records into one.
 </summary>
	<param name="mdTarget">The metadata record that will receive merged entity info.</param>
	<param name="mdSource">The metadata record that provides new entity info (typically from syncing)</param>
	<remarks>The method we employ is only suitable for single entity datasets - which is probably 99.9% of our world.</remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.syncAttrInfo(EPAMetadataEditor.XmlMetadata,EPAMetadataEditor.XmlMetadata,System.String)">
	<summary>
 Merge attribute info in two metadata records into one.
 </summary>
	<param name="mdTarget">The metadata record that will receive merged entity info.</param>
	<param name="mdSource">The metadata record that provides new entity info (typically from syncing)</param>
	<param name="enttypl">The label of the entity to merge.</param>
	<remarks>The method we employ is only suitable for single entity datasets - which is probably 99.9% of our world.</remarks>
</member><member name="M:EPAMetadataEditor.Synchronizer.computeChanges(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
	<summary>
 Compute the changes between two lists, recording the names to add to, delete from or kept as-is in old list to derive the new list.
 </summary>
	<param name="oldList">Original list of names</param>
	<param name="newList">Current list of names</param>
	<param name="adds">List of names to add (to be computed) - passed as reference</param>
	<param name="dels">List of names to delete (to be computed) - passed as reference</param>
	<param name="keeps">List of names to keep (to be computed) - passed as reference</param>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.Synchronizer">
	<summary>
 EPA Synchronizer implementation.
 Implements IMetadataSynchronizer interface.
 </summary>
	<remarks>This is more of a command control module that leaves the real work to a helper syncer.</remarks>
</member><member name="M:EPAMetadataEditor.BatchValidatorCommand.#ctor">
	<summary>
	</summary>
	<remarks>A creatable COM class must have a Public Sub New() 
 with no parameters, otherwise, the class will not be 
 registered in the COM registry and cannot be created 
 via CreateObject.
 </remarks>
</member><member name="M:EPAMetadataEditor.BatchValidatorCommand.OnCreate(System.Object)">
	<summary>
 Event handler to initialize the command when created.
 </summary>
	<param name="hook"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.BatchValidatorCommand.OnClick">
	<summary>
 Event handler to carry out batch validation when button is clicked.
 </summary>
	<remarks></remarks>
</member><member name="P:EPAMetadataEditor.BatchValidatorCommand.Enabled">
	<summary>
 Indicate whether the command (and its button) should be enabled.
 </summary>
	<value></value>
	<returns>True to enable. False otherwise.</returns>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.BatchValidatorCommand">
	<summary>
 Class that implements the command for the batch validator.
 Batch validator allows users to select multiple objects and validate their metadata (if any)
 without opening EME. A button for the command is available on EME toolbar.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.BatchFindReplaceForm.btnReplaceAll_Click(System.Object,System.EventArgs)">
	<summary>
 Carry out find/replace functionality when the user clicks the button for it.
 </summary>
	<param name="sender">Not used</param>
	<param name="e">Not used</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.BatchFindReplaceForm.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
	<summary>
 Hook into a win32 function
 </summary>
	<param name="hwnd"></param>
	<param name="wMsg"></param>
	<param name="wParam"></param>
	<param name="lParam"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.BatchFindReplaceForm.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
	<summary>
 Override the Pressed Key Processing Routine of the MDI-Parent primarily to be able to pass down ctrl-x/c/v keypresses
 </summary>
	<param name="msg"></param>
	<param name="keyData"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.BatchFindReplaceForm">
	<summary>
 A simple class to provide user interface for find/replace functionality.
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.XmlMetadata.dom">
	<summary>
 Internal structure to hold the metadata document
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.SetPropertyX(System.String,System.String)">
	<summary>
 Set the element with the given xpath to the given value.
 </summary>
	<param name="xpathStr">xpath expression of element to update. Does not have to pre-exist in the metadata document.</param>
	<param name="value">New content for element</param>
	<remarks>Assumes that the xpath points at most to a single target. Only the first occurence is updated.</remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.makeXpath(System.String,System.Xml.XmlNodeType)">
	<summary>
 Create the given element hierarchy as dictated by the given xpath. All elements leading up to the leaf tag will be created if not already there.
 </summary>
	<param name="xpathStr">xpath expression for the element hierarchy to create</param>
	<param name="nodeType">The type of leaf node to create. Default is a text node which is currently the only supported node.</param>
	<returns>True if succesful, False otherwise.</returns>
	<remarks>Logic does handle xpaths involving integer indexes.</remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.GetXml(System.String,System.Boolean,System.Boolean)">
	<summary>
 Get the XML snippet pointed to by the given xpath expression.
 </summary>
	<param name="xpathStr">xpath expression of the XML snippet targeted.</param>
	<param name="normalize">Normalize the xpath expression to start with root element (/metadata/) if not already.</param>
	<param name="outerXml">Return outer XML for the xpath target if True, return inner XML otherwise.</param>
	<returns>Returns the inner/outer XML snippet targeted by the xpath expression.</returns>
	<remarks>Some xpaths have special meaning: empty xpath return entire XML including any XML declaration; slash returns starting at root element without any headers.</remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.SetXml(System.String)">
	<summary>
 Set the XML document to the given xml content.
 </summary>
	<param name="xmlStr">String with XML content.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.copyFrom(EPAMetadataEditor.XmlMetadata,System.String,System.String)">
	<summary>
 Copy an XML snippet from one document and graft into current.
 </summary>
	<param name="src">Source XmlMetadata object to copy from</param>
	<param name="xpathStrSource">Source xpath expression to copy from</param>
	<param name="xpathStrTarget">Target xpath expression denoting where the XML snippet will be copied to. If not specified, then same as source xpath.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.copyFromString(System.String,System.String)">
	<summary>
 Copy an XML snippet from one document and graft into current.
 </summary>
	<param name="srcXml">Source Xml snippet to copy from</param>
	<param name="xpathStrTarget">Target xpath expression denoting where the XML snippet will be copied to.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.SetXml(System.String,System.String)">
	<summary>
 Copy the given XML snippet and graft at the element pointed by given xpath expression
 </summary>
	<param name="xpathStr">xpath target to receive XML snippet</param>
	<param name="xmlStr">The XML snippet to be received.</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.DeleteProperty(System.String)">
	<summary>
 Delete the element(s) pointed by the given xpath expression
 </summary>
	<param name="xpathStr">xpath expression for element(s) to be deleted</param>
	<remarks>All elements targeted by the xpath expression are deleted.</remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.SimpleGetProperty(System.String)">
	<summary>
 Get element value
 </summary>
	<param name="xpathStr">xpath expression for element targeted</param>
	<returns>String value of the element at given xpath.</returns>
	<remarks>If element is compound, then value is compound values of all subelements - though it's unusual to use that way.</remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.GetProperty(System.String)">
	<summary>
 Get element values
 </summary>
	<param name="xpathStr">xpath expression for elements targeted</param>
	<returns>List of String values with one entry for each element matching the given xpath expression. Nothing is returned if no matches.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.CountX(System.String)">
	<summary>
 Determine the no of occurences of the given xpath expression.
 </summary>
	<param name="xpathStr">xpath expression to count the occurrences of</param>
	<returns>The number of time that the given xpath expression is encountered.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.getRootTag">
	<summary>
 Get the name of the root element of the XML document.
 </summary>
	<returns>Name of the root element as String</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.checkDeleteKTTags">
	<summary>
 Delete XSL pattern indexed tags if not used in the metadata record.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.checkCreateKTTags">
	<summary>
 Create XSL pattern indexed tags if not already in the metadata record.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.normalize(System.String)">
	<summary>
 Normalize the given xpath expression to start with the root element (/metadata/), if not already.
 </summary>
	<param name="xpathStr">xpath expression to normalize</param>
	<returns>Normalized xpath expression</returns>
	<remarks>Handles only simple xpath expressions</remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.deletePropertyAndEmptyParents(System.String)">
	<summary>
 Delete an element from the metadata including all of its empty parents.
 </summary>
	<param name="name">Xpath of the element to delete</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.XmlMetadata.tagIsEmpty(System.String)">
	<summary>
 Determine if the provided tag has any text content.
 </summary>
	<param name="name">Name of the tag to check</param>
	<returns>Return true if the given tag has no text content (other than whitespace). Otherwise, return false.</returns>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.XmlMetadata">
	<summary>
 XmlMetadata represents a metadata document that is serialized from/to XML and provides basic operations to manipulate metadata.
 </summary>
	<remarks>XmlMetadata class was designed to remove reliance on several ArcObjects metadata objects such as IXMLPropertySet2.
 It does not attempt to be 100% compatible in function or API coverage but implements enough to fulfill its design goal.</remarks>
</member><member name="F:EPAMetadataEditor.GlobalVars.config">
	<summary>
 Configuration from XML file.
 </summary>
	<remarks>We use this to give the user a way to configure some options that are not configurable through the user interface.</remarks>
</member><member name="T:EPAMetadataEditor.GlobalVars.appState">
	<summary>
 Enum that defines application states we are interested in keeping track of
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.GlobalVars.currentAppState">
	<summary>
 Variable that keeps track of the current application state
 </summary>
	<remarks></remarks>
</member><member name="P:EPAMetadataEditor.GlobalVars.enabled">
	<summary>
 Get/Set if the application is enabled
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:EPAMetadataEditor.GlobalVars.mdbPath">
	<summary>
 Path to supporting MSAccess database
 </summary>
	<remarks>This can be overridden by the user in config.xml</remarks>
</member><member name="P:EPAMetadataEditor.GlobalVars.mdbPathDefault">
	<summary>
 Default path to supporting MSAccess database
 </summary>
	<remarks>Actual path can be retrieved via mdbPath property.</remarks>
</member><member name="P:EPAMetadataEditor.GlobalVars.connStr">
	<summary>
 The OLEDB connection string used to connect to the MSAccess database.
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.GlobalVars.idSep">
	<summary>
 The separator used internally by EME to seperate various postfixes from identifiers based on the XSL pattern for the element
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.GlobalVars.nameStr">
	<summary>
 Name string for this application used in a number of contexts. 
 Some other name references had to be hardwired, so changing the value here alone is not sufficient.
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.GlobalVars.iXPS">
	<summary>
 Variable that holds the metadata record copy being edited.
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.GlobalVars.savedSession">
	<summary>
 Indicator that the user has performed a save without closing EME.
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.GlobalVars.recoveredSession">
	<summary>
 Indicator that a previously saved metadata record was recovered during current EME session.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.GlobalVars.init">
	<summary>
 (Re)Initialize global variables as applicable.
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.GlobalVars._userThesaurus">
	<summary>
 The user thesaurus being used if applicable.
 </summary>
	<remarks></remarks>
</member><member name="P:EPAMetadataEditor.GlobalVars.userThesaurus">
	<summary>
 The property providing controlled access to user thesaurus.
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.GlobalVars.proc">
	<summary>
 Keeps track of the HTML Help process (hh.exe) to avoid having more than one help window open.
 </summary>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.GlobalVars.ValidationMode">
	<summary>
 Enumeration for metadata validation modes:
 <c>Webservice</c> uses EPA's validation webservice with fallback to local validation upon failure or timeout.
 <c>Local</c> uses local validation service hardwired into the editor.
 </summary>
	<remarks>
 At the time of release, webservice and local validation both yield the same results.
 It is conceivable that the webservice validation may be updated ahead of or without an update to EME.
 </remarks>
</member><member name="F:EPAMetadataEditor.GlobalVars._ValidationMode">
	<summary>
 Holds the validation mode in effect.
 </summary>
	<remarks></remarks>
</member><member name="P:EPAMetadataEditor.GlobalVars.CurrentValidationMode">
	<summary>
 Gets/sets the validation mode in effect.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.EMEToolbar.ArcGISCategoryRegistration(System.Type)">
	<summary>
 Required method for ArcGIS Component Category registration -
 Do not modify the contents of this method with the code editor.
 </summary>
</member><member name="M:EPAMetadataEditor.EMEToolbar.ArcGISCategoryUnregistration(System.Type)">
	<summary>
 Required method for ArcGIS Component Category unregistration -
 Do not modify the contents of this method with the code editor.
 </summary>
</member><member name="M:EPAMetadataEditor.EMEToolbar.#ctor">
	<summary>
	</summary>
	<remarks>A creatable COM class must have a Public Sub New() 
 with no parameters, otherwise, the class will not be 
 registered in the COM registry and cannot be created 
 via CreateObject.
 </remarks>
</member><member name="P:EPAMetadataEditor.EMEToolbar.Caption">
	<summary>
 Caption for the toolbar.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:EPAMetadataEditor.EMEToolbar.Name">
	<summary>
 Name of the toolbar.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.EMEToolbar">
	<summary>
 An ArcCatalog toolbar for EME, EPA Synchronizer and related tools.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.HelpCommand.OnCreate(System.Object)">
	<summary>
 Event handler to initialize the command when created.
 </summary>
	<param name="hook"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.HelpCommand.OnClick">
	<summary>
 Event handler to open help when button is clicked.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.ImportMetadataCommand.OnCreate(System.Object)">
	<summary>
 Event handler to initialize the command when created.
 </summary>
	<param name="hook"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.ImportMetadataCommand.OnClick">
	<summary>
 Event handler to carry out batch metadata import when button is clicked.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.ImportMetadataCommand.gxbrowse_for_geodatabase(System.Int32)">
	<summary>
 Prompt user for selecting an ArcCatalog object
 </summary>
	<param name="hParentHwnd">Parent hwnd</param>
	<returns>IGxObject representing the user selected ArcCatalog object. Returns Nothing if no object was selected.</returns>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.SyncCommand.syncMode">
	<summary>
 Enum representing the various syncronization modes that EPA syncer can be in.
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.SyncCommand.currentSyncLevel">
	<summary>
 Current synchronization mode
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.SyncCommand.imd">
	<summary>
 Shared variable to tell syncer which user selected object syncing was initiated for
 </summary>
	<remarks></remarks>
</member><member name="F:EPAMetadataEditor.SyncCommand.gxApp">
	<summary>
 Reference to ArcCatalog instance
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncCommand.OnCreate(System.Object)">
	<summary>
 Event handler to initialize the command when created.
 </summary>
	<param name="hook"></param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.SyncCommand.OnClick">
	<summary>
 Event handler to carry out synchronization when button is clicked.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getAppFolder">
	<summary>
 Returns the folder path where EME is installed in.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getTemplateFolder">
	<summary>
 Returns the folder path where the template files are stored in.
 </summary>
	<returns></returns>
	<remarks>Template files are copied to application data folder at start up if necessary.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.getAppDataFolder">
	<summary>
 Returns the folder path where application data is stored.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getEpaFolder">
	<summary>
 Returns the folder path where files for EPA validation are stored.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getMpFolder">
	<summary>
 Returns the folder path where files for EPA validation are stored.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getWorkingFolder">
	<summary>
 Returns the folder path where temporary files are stored in.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getEpaStylesheetsSourceFolder">
	<summary>
 Returns the folder path where EPA stylesheet files are stored in at install time.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getArcgisMetadataFolder">
	<summary>
 Returns the folder path where Arcgis metadata stylesheet files are stored in.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.GetVersion">
	<summary>
 Returns the application version when called by the main assembly.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.stripNonAlphanumeric(System.String@,System.String)">
	<summary>
 Returns  <paramref name="origStr"/> with non-alphanumeric characters stripped out.
 Each stripped out character is replaced by the contents of <paramref name="replaceWith"/> if specified.
 </summary>
</member><member name="M:EPAMetadataEditor.Utils.ErrorHandler(System.Exception)">
	<summary>
 Prints debugging information to a dialog window based on exception information 
 passed in <paramref name="ex"/>.
 </summary>
</member><member name="M:EPAMetadataEditor.Utils.GetAssociatedProgram(System.String)">
	<summary>
 Returns the path to the application associated with the specified file extension.
 Returns empty string, if none found in Windows registry.
 </summary>
</member><member name="M:EPAMetadataEditor.Utils.OpenInIE(System.String)">
	<summary>
 Attemps to open the specified URL using Internet Explorer.
 </summary>
</member><member name="M:EPAMetadataEditor.Utils.OpenWitDefaultFileHandler(System.String)">
	<summary>
 Attemps to open the specified URL using default file handler.
 </summary>
</member><member name="M:EPAMetadataEditor.Utils.openMSAccess(System.String)">
	<summary>
 Runs MSAccess application. 
 If the name of a macro is specified, the macro is run by MSAccess upon startup.
 </summary>
</member><member name="M:EPAMetadataEditor.Utils.readerForSQL(System.String,System.Data.OleDb.OleDbConnection@)">
	<summary>
 Returns a data reader object for the provided SQL string.
 The caller is responsible for proper cleanup after reader is no longer needed.
 </summary>
</member><member name="M:EPAMetadataEditor.Utils.datatableFromSQL(System.String)">
	<summary>
 COnstruct a DataTable object using the provided SQL query text.
 </summary>
	<param name="SQLStr">SQL query text</param>
	<returns>A DataTable object obtained by executing the provided SQL against source database.</returns>
	<remarks>The resulting record structure needs to contain an "OrderedId" field with unique values for correct operation.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.nv(System.Object,System.Object)">
	<summary>
 Function to return the provided object's value if not null or nothing. Otherwise return the provided default value.
 </summary>
	<param name="o">Object</param>
	<param name="defaultValue">Default value if the object has no value</param>
	<returns>return the provided object's value if not null or nothing. Otherwise return the provided default value.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.ColumnEqual(System.Object,System.Object)">
	<summary>
 Compares two values to determine if they are equal. Also compares DBNULL.Value.
 </summary>
	<param name="A">First value to compare</param>
	<param name="B">Second value to compare</param>
	<returns>Returns true if two values are equal or both are null. Otherwise, returns false.</returns>
	<remarks>Based on http://support.microsoft.com/default.aspx?scid=kb;EN-US;325684 </remarks>
</member><member name="M:EPAMetadataEditor.Utils.SelectDistinct(System.String,System.Data.DataView,System.String,System.String)">
	<summary>
 Construct a copy of a DataView by applying a filter and removing duplicate rows. 
 </summary>
	<param name="TableName">Name of DataTable object to be created</param>
	<param name="SourceView">DataView object that has the rows to be filtered</param>
	<param name="FieldName">Name of field in SourceView that needs to be distinct</param>
	<param name="filter">Filter string to apply</param>
	<returns>A DataView object suitable for use as data source to a combo box. The rows in SourceView are filtered and copied to a
 a new DataTable only if the distinct field value has not been seen before.</returns>
	<remarks>Based on http://support.microsoft.com/default.aspx?scid=kb;EN-US;325684 </remarks>
</member><member name="M:EPAMetadataEditor.Utils.textToTempFile(System.String,System.String)">
	<summary>
 Write out the provided text to to a new temporary file.
 </summary>
	<param name="txt">Text to write to a file</param>
	<returns>Full pathname of the temporary file that was created.</returns>
	<remarks>File is created with .xml extension and the provided content must be in XML format.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.decorateXSL(System.String,System.Boolean)">
	<summary>
 Decorate XML snippet returned from the validation service turning it into a proper XML file
 and inserting an XSL stylesheet.
 </summary>
	<param name="xmlStr">XML snippet</param>
	<returns>Valid XML text</returns>
	<remarks>The right way to do this is to do DOM manipulation but this works.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.mergeEPAandMP(System.String,System.String)">
	<summary>
 Utility function to merge EPA schematron validation results with MP validation results.
 </summary>
	<param name="epaResults">EPA schematron validation results as XML snippet</param>
	<param name="mpResults">MP validation results as XML snippet</param>
	<returns></returns>
	<remarks>The right way to do this is to do DOM manipulation but this works.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.getLastSessionXMLPath">
	<summary>
 Get the fully qualified filename for the file that contains a previously saved session.
 </summary>
	<returns>String containing the path.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.checkForPreviouslySavedSession">
	<summary>
 Check if a previously saved session exists.
 </summary>
	<returns>True if a previously saved session is found on the filesystem. False otherwise.</returns>
	<remarks>The saved session must be from a previous EME session, not the one currently active.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.promptAndRecoverSavedSession">
	<summary>
 Prompt the user for recovering a previously saved session.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.deleteSavedSession">
	<summary>
 Delete the file containing a previously saved session.
 </summary>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getFromSingleValuedSQL(System.String)">
	<summary>
 Get the value of the first field of an SQL expression that returns a single record.
 </summary>
	<param name="SQLStr">SQL expression to evaluate</param>
	<returns>Field value as Object</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getTagParent(System.String)">
	<summary>
 Get the parent tag of a given XSL pattern.
 </summary>
	<param name="name">XSL pattern whose parent is sought</param>
	<returns></returns>
	<remarks>Warning: This will not work with some names that have qualifiers involving a slash character.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.xslTransform(System.String,System.String,System.String)">
	<summary>
 Apply an XSL transform to an XML file.
 </summary>
	<param name="xslfile">Full filepathname of the XSLT file</param>
	<param name="fin">Full filepathname of the input file</param>
	<param name="fout">Full filepathname of the output file</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.xslTransformViaCOM(System.String,System.String,System.String)">
	<summary>
 Perform XSL transformation via the COM library MSXML2.
 </summary>
	<param name="xslFile">Full path to the XSL transformation file</param>
	<param name="fin">Full path to the XML file to be transformed</param>
	<param name="fout">Full path to the file that will receive the output of the XSL transformation</param>
	<remarks>This is just a different wrapper around the actual function that performs the transform.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.xslTransformViaCOM(System.String,System.String)">
	<summary>
 Perform XSL transformation via the COM library MSXML2.
 </summary>
	<param name="xslFile"></param>
	<param name="xmlStr"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.wipeEsriTags(EPAMetadataEditor.XmlMetadata)">
	<summary>
 Remove ESRI tags in metadata.
 </summary>
	<param name="iXPS">IXmlPropertySet that contains the metadata being edited.</param>
	<returns>True if metadata was modified (i.e. at least one ESRI tag removed). False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.DeserializeFromXmlFile(System.String,System.Type)">
	<summary>
 XML file deserializer.
 </summary>
	<param name="filename">String containing the filename for an XML file that will be deserialized.</param>
	<param name="targetType">The type that the XML file will be deserialized into.</param>
	<returns>An instance of the requested type deserialized from the XML file provided.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.findAndReplaceWithCount(System.String@,System.String,System.String)">
	<summary>
 Function that will substitute instances of a string with another string in some text 
 and report back the no of substitutions made.
 </summary>
	<param name="txt">String containing the text to operate on.</param>
	<param name="oldValue">String to be replaced.</param>
	<param name="newValue">String to substitute.</param>
	<returns>Integer indicating the no of substitutions made.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.IsAlphaNumeric(System.String)">
	<summary>
 Determine if the given string consist only of alphanumeric characters
 </summary>
	<param name="str">String to be tested</param>
	<returns>True if str contains only alphanumeric characters, false otherwise.</returns>
	<remarks>At least one character is required</remarks>
</member><member name="M:EPAMetadataEditor.Utils.IsNumeric(System.String)">
	<summary>
 Determine if the given string consist only of numeric characters
 </summary>
	<param name="str">String to be tested</param>
	<returns>True if str contains only numeric characters, false otherwise.</returns>
	<remarks>At least one character is required</remarks>
</member><member name="M:EPAMetadataEditor.Utils.copyDir(System.String,System.String,System.IO.SearchOption)">
	<summary>
 Copy source directory with given path to given target directory path.
 </summary>
	<param name="sourceDir">Full path to source directory</param>
	<param name="targetDir">Full path to target directory</param>
	<param name="searchOption">Whether only top level files are included from source directory or all files and directories under it. Defaults to all.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.uncopyDir(System.String,System.String,System.IO.SearchOption)">
	<summary>
 Undo of copy source directory with given path to given target directory path. 
 </summary>
	<param name="sourceDir">Full path to source directory</param>
	<param name="targetDir">Full path to target directory</param>
	<param name="searchOption">Whether only top level files are included from source directory or all files and directories under it. Defaults to all.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.copyDirPerformed(System.String,System.String,System.IO.SearchOption)">
	<summary>
 Check if copy of source directory with given path to given target directory path has been performed previously.
 </summary>
	<param name="sourceDir">Full path to source directory</param>
	<param name="targetDir">Full path to target directory</param>
	<param name="searchOption">Whether only top level files are included from source directory or all files and directories under it. Defaults to all.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.checkAndCopyTemplate">
	<summary>
 Copy the contents of the template folder to the user's AppData system/special folder.
 </summary>
	<returns></returns>
	<remarks>We need this because each user has to work in folders reserved for them due to increasing security/privacy restrictions in Windows operating systems.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.transform(System.String,System.String,System.String)">
	<summary>
 Apply an XSL transform to an XML file.
 </summary>
	<param name="xslfile">Full filepathname of the XSLT file</param>
	<param name="fin">Full filepathname of the input file</param>
	<param name="fout">Full filepathname of the output file</param>
	<remarks>.NET way to do XSL transform does not work so well for some stylesheets from the "XSL Patterns" era. Currently not used.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.HelpSeeker(System.String,System.Diagnostics.Process@)">
	<summary>
 The workhorse subroutine to do actual work of displaying help from a .chm file.
 </summary>
	<param name="helpPage">Default help page to display if no help for requiested name can be found.</param>
	<remarks>We let only one help page open at a time. This is by design.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.stringMd5(System.String)">
	<summary>
 Compute the MD5 digest of the given text.
 </summary>
	<param name="SourceText">The text for which MD5 digest is to be computed.</param>
	<returns>MD5 digest of the given text.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.fileMd5(System.String)">
	<summary>
 Compute the MD5 digest of the text in the given file.
 </summary>
	<param name="srcFile">Full path name of the file which MD5 digest is to be computed for.</param>
	<returns>MD5 digest of the given file.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.iAmInstalled">
	<summary>
 Determine if we are running as an installed app or from within VS IDE.
 </summary>
	<returns>True if application/extension is running in the field as an installed app, False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.ValidateActionDo(System.Collections.Hashtable)">
	<summary>
 Perform metadata validation using MP and schematron rules (for EPA compliance)
 using webservice or local validation.
 </summary>
	<param name="args">Hashtable containing arguments to be used during validation.</param>
	<returns>Boolean value indication successful completion.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.withoutDoctype(System.String)">
	<summary>
 Remove the DOCTYPE declaration in the metadata record - if it exists.
 </summary>
	<param name="mdXml">XML metadata record.</param>
	<returns>The metadata record after removal of DOCTYPE declaration.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.isWellFormedXmlFile(System.String)">
	<summary>
 Determine if the given file contains well-formed XML.
 </summary>
	<param name="filename">Full path to the file to be tested.</param>
	<returns>True if file contains well-formed XML, False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.isWellFormedXmlString(System.String)">
	<summary>
 Determine if the given text contains well-formed XML.
 </summary>
	<param name="txt">Text to be tested.</param>
	<returns>True if the text contains well-formed XML, False otherwise.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.asSafeFilename(System.String,System.String,System.Boolean)">
	<summary>
 Turn the given filename into a valid Windows filename.
 </summary>
	<param name="filename">Filename to operate on</param>
	<returns>Returns the filename modified by replacing any invalid characters with underscore character.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.filenameAsUrl(System.String)">
	<summary>
 Turn file reference to a URL.
 </summary>
	<param name="filename">Full path to the file</param>
	<returns>A String containing the URL reference to the given file.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getRegistryString(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
	<summary>
 Get a string value from the registry
 </summary>
	<param name="regkey">Registry hive to look under</param>
	<param name="subkey">Registry subkey to look under</param>
	<param name="keyname">Name of requested registry key</param>
	<param name="defaultValue">Default value to return if key not found</param>
	<returns>The full path of the directory where ArcGIS Desktop 10.0 has been installed.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.getArcgisInstallDir">
	<summary>
 Get the location of ArcGIS installation
 </summary>
	<returns>The full path of the directory where ArcGIS Desktop 10.0 has been installed.</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.cleanseUtf16(System.String@)">
	<summary>
 Remove the utf-16 encoding attribute from xml header as it is typically incorrect
 </summary>
	<param name="md">The string containing metadata to cleanse. Passed by reference, hence changed in place if needed.</param>
	<returns>String containing cleansed metadata</returns>
	<remarks>Will we ever stumble on metadata actually in utf-16?</remarks>
</member><member name="M:EPAMetadataEditor.Utils.disableLinkLabelTabStops(System.Windows.Forms.Control)">
	<summary>
 Prevent LinkLabel objects from becoming tab stops.
 </summary>
	<param name="ctrl">Control to check</param>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.decorateCountPhrase(System.String,System.Int32)">
	<summary>
 Prettier expression of a count
 </summary>
	<param name="txt">Name of stuff to be counted</param>
	<param name="count">The count to use</param>
	<returns>Decorated expression</returns>
	<remarks></remarks>
</member><member name="M:EPAMetadataEditor.Utils.changeExtensionTo(System.String,System.String)">
	<summary>
 Return the same filename with a new extension
 </summary>
	<param name="filename">Name of the file</param>
	<param name="newExtension">New extension for file</param>
	<returns></returns>
	<remarks>If the file does not have an extension (no .), then we simply append the new extension.</remarks>
</member><member name="M:EPAMetadataEditor.Utils.exportMetadataWithMp(System.String,System.String,System.Collections.Generic.List{System.String})">
	<summary>
 Use MP to save metadata in formats other than XML 
 </summary>
	<param name="filepath">The filesystem path where files will be stored.</param>
	<param name="xmlFilename">Name of the XML file</param>
	<param name="selectedFormats">Formats to generate</param>
	<remarks></remarks>
</member><member name="T:EPAMetadataEditor.Utils">
	<summary>
 Miscellenaous utility functions utilized by EME.
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>